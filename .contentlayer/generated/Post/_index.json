[
  {
    "title": "Dynamic Routing and Static Regeneration",
    "description": "How to use incremental static regeneration using dynamic routes.",
    "date": "2023-03-04T00:00:00.000Z",
    "published": true,
    "image": "/images/blog/blog-post-2.jpg",
    "authors": [
      "shadcn"
    ],
    "body": {
      "raw": "\n<Callout>\n  The text below is from the [Tailwind\n  CSS](https://play.tailwindcss.com/uj1vGACRJA?layout=preview) docs. I copied it\n  here to test the markdown styles. **Tailwind is awesome. You should use it.**\n</Callout>\n\nUntil now, trying to style an article, document, or blog post with Tailwind has been a tedious task that required a keen eye for typography and a lot of complex custom CSS.\n\nBy default, Tailwind removes all of the default browser styling from paragraphs, headings, lists and more. This ends up being really useful for building application UIs because you spend less time undoing user-agent styles, but when you _really are_ just trying to style some content that came from a rich-text editor in a CMS or a markdown file, it can be surprising and unintuitive.\n\nWe get lots of complaints about it actually, with people regularly asking us things like:\n\n> Why is Tailwind removing the default styles on my `h1` elements? How do I disable this? What do you mean I lose all the other base styles too?\n> We hear you, but we're not convinced that simply disabling our base styles is what you really want. You don't want to have to remove annoying margins every time you use a `p` element in a piece of your dashboard UI. And I doubt you really want your blog posts to use the user-agent styles either — you want them to look _awesome_, not awful.\n\nThe `@tailwindcss/typography` plugin is our attempt to give you what you _actually_ want, without any of the downsides of doing something stupid like disabling our base styles.\n\nIt adds a new `prose` class that you can slap on any block of vanilla HTML content and turn it into a beautiful, well-formatted document:\n\n```html\n<article class=\"prose\">\n  <h1>Garlic bread with cheese: What the science tells us</h1>\n  <p>\n    For years parents have espoused the health benefits of eating garlic bread\n    with cheese to their children, with the food earning such an iconic status\n    in our culture that kids will often dress up as warm, cheesy loaf for\n    Halloween.\n  </p>\n  <p>\n    But a recent study shows that the celebrated appetizer may be linked to a\n    series of rabies cases springing up around the country.\n  </p>\n</article>\n```\n\nFor more information about how to use the plugin and the features it includes, [read the documentation](https://github.com/tailwindcss/typography/blob/master/README.md).\n\n---\n\n## What to expect from here on out\n\nWhat follows from here is just a bunch of absolute nonsense I've written to dogfood the plugin itself. It includes every sensible typographic element I could think of, like **bold text**, unordered lists, ordered lists, code blocks, block quotes, _and even italics_.\n\nIt's important to cover all of these use cases for a few reasons:\n\n1.  We want everything to look good out of the box.\n2.  Really just the first reason, that's the whole point of the plugin.\n3.  Here's a third pretend reason though a list with three items looks more realistic than a list with two items.\n\nNow we're going to try out another header style.\n\n### Typography should be easy\n\nSo that's a header for you — with any luck if we've done our job correctly that will look pretty reasonable.\n\nSomething a wise person once told me about typography is:\n\n> Typography is pretty important if you don't want your stuff to look like trash. Make it good then it won't be bad.\n\nIt's probably important that images look okay here by default as well:\n\n<Image\n  src=\"/images/blog/blog-post-4.jpg\"\n  width=\"718\"\n  height=\"404\"\n  alt=\"Image\"\n/>\n\nContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.\n\nNow I'm going to show you an example of an unordered list to make sure that looks good, too:\n\n- So here is the first item in this list.\n- In this example we're keeping the items short.\n- Later, we'll use longer, more complex list items.\n\nAnd that's the end of this section.\n\n## What if we stack headings?\n\n### We should make sure that looks good, too.\n\nSometimes you have headings directly underneath each other. In those cases you often have to undo the top margin on the second heading because it usually looks better for the headings to be closer together than a paragraph followed by a heading should be.\n\n### When a heading comes after a paragraph …\n\nWhen a heading comes after a paragraph, we need a bit more space, like I already mentioned above. Now let's see what a more complex list would look like.\n\n- **I often do this thing where list items have headings.**\n\n  For some reason I think this looks cool which is unfortunate because it's pretty annoying to get the styles right.\n\n  I often have two or three paragraphs in these list items, too, so the hard part is getting the spacing between the paragraphs, list item heading, and separate list items to all make sense. Pretty tough honestly, you could make a strong argument that you just shouldn't write this way.\n\n- **Since this is a list, I need at least two items.**\n\n  I explained what I'm doing already in the previous list item, but a list wouldn't be a list if it only had one item, and we really want this to look realistic. That's why I've added this second list item so I actually have something to look at when writing the styles.\n\n- **It's not a bad idea to add a third item either.**\n\n  I think it probably would've been fine to just use two items but three is definitely not worse, and since I seem to be having no trouble making up arbitrary things to type, I might as well include it.\n\nAfter this sort of list I usually have a closing statement or paragraph, because it kinda looks weird jumping right to a heading.\n\n## Code should look okay by default.\n\nI think most people are going to use [highlight.js](https://highlightjs.org/) or [Prism](https://prismjs.com/) or something if they want to style their code blocks but it wouldn't hurt to make them look _okay_ out of the box, even with no syntax highlighting.\n\nHere's what a default `tailwind.config.js` file looks like at the time of writing:\n\n```js\nmodule.exports = {\n  purge: [],\n  theme: {\n    extend: {},\n  },\n  variants: {},\n  plugins: [],\n}\n```\n\nHopefully that looks good enough to you.\n\n### What about nested lists?\n\nNested lists basically always look bad which is why editors like Medium don't even let you do it, but I guess since some of you goofballs are going to do it we have to carry the burden of at least making it work.\n\n1.  **Nested lists are rarely a good idea.**\n    - You might feel like you are being really \"organized\" or something but you are just creating a gross shape on the screen that is hard to read.\n    - Nested navigation in UIs is a bad idea too, keep things as flat as possible.\n    - Nesting tons of folders in your source code is also not helpful.\n2.  **Since we need to have more items, here's another one.**\n    - I'm not sure if we'll bother styling more than two levels deep.\n    - Two is already too much, three is guaranteed to be a bad idea.\n    - If you nest four levels deep you belong in prison.\n3.  **Two items isn't really a list, three is good though.**\n    - Again please don't nest lists if you want people to actually read your content.\n    - Nobody wants to look at this.\n    - I'm upset that we even have to bother styling this.\n\nThe most annoying thing about lists in Markdown is that `<li>` elements aren't given a child `<p>` tag unless there are multiple paragraphs in the list item. That means I have to worry about styling that annoying situation too.\n\n- **For example, here's another nested list.**\n\n  But this time with a second paragraph.\n\n  - These list items won't have `<p>` tags\n  - Because they are only one line each\n\n- **But in this second top-level list item, they will.**\n\n  This is especially annoying because of the spacing on this paragraph.\n\n  - As you can see here, because I've added a second line, this list item now has a `<p>` tag.\n\n    This is the second line I'm talking about by the way.\n\n  - Finally here's another list item so it's more like a list.\n\n- A closing list item, but with no nested list, because why not?\n\nAnd finally a sentence to close off this section.\n\n## There are other elements we need to style\n\nI almost forgot to mention links, like [this link to the Tailwind CSS website](https://tailwindcss.com). We almost made them blue but that's so yesterday, so we went with dark gray, feels edgier.\n\nWe even included table styles, check it out:\n\n| Wrestler                | Origin       | Finisher           |\n| ----------------------- | ------------ | ------------------ |\n| Bret \"The Hitman\" Hart  | Calgary, AB  | Sharpshooter       |\n| Stone Cold Steve Austin | Austin, TX   | Stone Cold Stunner |\n| Randy Savage            | Sarasota, FL | Elbow Drop         |\n| Vader                   | Boulder, CO  | Vader Bomb         |\n| Razor Ramon             | Chuluota, FL | Razor's Edge       |\n\nWe also need to make sure inline code looks good, like if I wanted to talk about `<span>` elements or tell you the good news about `@tailwindcss/typography`.\n\n### Sometimes I even use `code` in headings\n\nEven though it's probably a bad idea, and historically I've had a hard time making it look good. This _\"wrap the code blocks in backticks\"_ trick works pretty well though really.\n\nAnother thing I've done in the past is put a `code` tag inside of a link, like if I wanted to tell you about the [`tailwindcss/docs`](https://github.com/tailwindcss/docs) repository. I don't love that there is an underline below the backticks but it is absolutely not worth the madness it would require to avoid it.\n\n#### We haven't used an `h4` yet\n\nBut now we have. Please don't use `h5` or `h6` in your content, Medium only supports two heading levels for a reason, you animals. I honestly considered using a `before` pseudo-element to scream at you if you use an `h5` or `h6`.\n\nWe don't style them at all out of the box because `h4` elements are already so small that they are the same size as the body copy. What are we supposed to do with an `h5`, make it _smaller_ than the body copy? No thanks.\n\n### We still need to think about stacked headings though.\n\n#### Let's make sure we don't screw that up with `h4` elements, either.\n\nPhew, with any luck we have styled the headings above this text and they look pretty good.\n\nLet's add a closing paragraph here so things end with a decently sized block of text. I can't explain why I want things to end that way but I have to assume it's because I think things will look weird or unbalanced if there is a heading too close to the end of the document.\n\nWhat I've written here is probably long enough, but adding this final sentence can't hurt.\n\n## GitHub Flavored Markdown\n\nI've also added support for GitHub Flavored Mardown using `remark-gfm`.\n\nWith `remark-gfm`, we get a few extra features in our markdown. Example: autolink literals.\n\nA link like www.example.com or https://example.com would automatically be converted into an `a` tag.\n\nThis works for email links too: contact@example.com.\n",
      "code": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of m(e))!y.call(t,l)&&l!==i&&o(t,l,{get:()=>e[l],enumerable:!(a=p(e,l))||a.enumerable});return t};var f=(t,e,i)=>(i=t!=null?u(g(t)):{},s(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),k=t=>s(o({},\"__esModule\",{value:!0}),t);var h=w((x,r)=>{r.exports=_jsx_runtime});var N={};b(N,{default:()=>I,frontmatter:()=>v});var n=f(h()),v={title:\"Dynamic Routing and Static Regeneration\",description:\"How to use incremental static regeneration using dynamic routes.\",image:\"/images/blog/blog-post-2.jpg\",date:\"2023-03-04\",authors:[\"shadcn\"]};function d(t){let e=Object.assign({p:\"p\",a:\"a\",strong:\"strong\",em:\"em\",blockquote:\"blockquote\",code:\"code\",div:\"div\",pre:\"pre\",span:\"span\",hr:\"hr\",h2:\"h2\",ol:\"ol\",li:\"li\",h3:\"h3\",ul:\"ul\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",h4:\"h4\"},t.components),{Callout:i,Image:a}=e;return i||c(\"Callout\",!0,\"10:1-14:11\"),a||c(\"Image\",!0,\"71:1-76:3\"),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i,{children:(0,n.jsxs)(e.p,{children:[\"The text below is from the \",(0,n.jsx)(e.a,{href:\"https://play.tailwindcss.com/uj1vGACRJA?layout=preview\",children:`Tailwind\nCSS`}),` docs. I copied it\nhere to test the markdown styles. `,(0,n.jsx)(e.strong,{children:\"Tailwind is awesome. You should use it.\"})]})}),`\n`,(0,n.jsx)(e.p,{children:\"Until now, trying to style an article, document, or blog post with Tailwind has been a tedious task that required a keen eye for typography and a lot of complex custom CSS.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"By default, Tailwind removes all of the default browser styling from paragraphs, headings, lists and more. This ends up being really useful for building application UIs because you spend less time undoing user-agent styles, but when you \",(0,n.jsx)(e.em,{children:\"really are\"}),\" just trying to style some content that came from a rich-text editor in a CMS or a markdown file, it can be surprising and unintuitive.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We get lots of complaints about it actually, with people regularly asking us things like:\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Why is Tailwind removing the default styles on my \",(0,n.jsx)(e.code,{children:\"h1\"}),` elements? How do I disable this? What do you mean I lose all the other base styles too?\nWe hear you, but we're not convinced that simply disabling our base styles is what you really want. You don't want to have to remove annoying margins every time you use a `,(0,n.jsx)(e.code,{children:\"p\"}),\" element in a piece of your dashboard UI. And I doubt you really want your blog posts to use the user-agent styles either \\u2014 you want them to look \",(0,n.jsx)(e.em,{children:\"awesome\"}),\", not awful.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"@tailwindcss/typography\"}),\" plugin is our attempt to give you what you \",(0,n.jsx)(e.em,{children:\"actually\"}),\" want, without any of the downsides of doing something stupid like disabling our base styles.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It adds a new \",(0,n.jsx)(e.code,{children:\"prose\"}),\" class that you can slap on any block of vanilla HTML content and turn it into a beautiful, well-formatted document:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"html\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"html\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"<\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"article\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#79C0FF\"},children:\"class\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#A5D6FF\"},children:'\"prose\"'}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  <\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"h1\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">Garlic bread with cheese: What the science tells us</\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"h1\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  <\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    For years parents have espoused the health benefits of eating garlic bread\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    with cheese to their children, with the food earning such an iconic status\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    in our culture that kids will often dress up as warm, cheesy loaf for\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    Halloween.\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  </\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  <\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    But a recent study shows that the celebrated appetizer may be linked to a\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    series of rabies cases springing up around the country.\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  </\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"</\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"article\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"For more information about how to use the plugin and the features it includes, \",(0,n.jsx)(e.a,{href:\"https://github.com/tailwindcss/typography/blob/master/README.md\",children:\"read the documentation\"}),\".\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{id:\"what-to-expect-from-here-on-out\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#what-to-expect-from-here-on-out\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What to expect from here on out\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"What follows from here is just a bunch of absolute nonsense I've written to dogfood the plugin itself. It includes every sensible typographic element I could think of, like \",(0,n.jsx)(e.strong,{children:\"bold text\"}),\", unordered lists, ordered lists, code blocks, block quotes, \",(0,n.jsx)(e.em,{children:\"and even italics\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"It's important to cover all of these use cases for a few reasons:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"We want everything to look good out of the box.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Really just the first reason, that's the whole point of the plugin.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Here's a third pretend reason though a list with three items looks more realistic than a list with two items.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Now we're going to try out another header style.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"typography-should-be-easy\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#typography-should-be-easy\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Typography should be easy\"]}),`\n`,(0,n.jsx)(e.p,{children:\"So that's a header for you \\u2014 with any luck if we've done our job correctly that will look pretty reasonable.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Something a wise person once told me about typography is:\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Typography is pretty important if you don't want your stuff to look like trash. Make it good then it won't be bad.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It's probably important that images look okay here by default as well:\"}),`\n`,(0,n.jsx)(a,{src:\"/images/blog/blog-post-4.jpg\",width:\"718\",height:\"404\",alt:\"Image\"}),`\n`,(0,n.jsx)(e.p,{children:\"Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Now I'm going to show you an example of an unordered list to make sure that looks good, too:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"So here is the first item in this list.\"}),`\n`,(0,n.jsx)(e.li,{children:\"In this example we're keeping the items short.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Later, we'll use longer, more complex list items.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"And that's the end of this section.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"what-if-we-stack-headings\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#what-if-we-stack-headings\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What if we stack headings?\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"we-should-make-sure-that-looks-good-too\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#we-should-make-sure-that-looks-good-too\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"We should make sure that looks good, too.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Sometimes you have headings directly underneath each other. In those cases you often have to undo the top margin on the second heading because it usually looks better for the headings to be closer together than a paragraph followed by a heading should be.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"when-a-heading-comes-after-a-paragraph-\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#when-a-heading-comes-after-a-paragraph-\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"When a heading comes after a paragraph \\u2026\"]}),`\n`,(0,n.jsx)(e.p,{children:\"When a heading comes after a paragraph, we need a bit more space, like I already mentioned above. Now let's see what a more complex list would look like.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"I often do this thing where list items have headings.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"For some reason I think this looks cool which is unfortunate because it's pretty annoying to get the styles right.\"}),`\n`,(0,n.jsx)(e.p,{children:\"I often have two or three paragraphs in these list items, too, so the hard part is getting the spacing between the paragraphs, list item heading, and separate list items to all make sense. Pretty tough honestly, you could make a strong argument that you just shouldn't write this way.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Since this is a list, I need at least two items.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"I explained what I'm doing already in the previous list item, but a list wouldn't be a list if it only had one item, and we really want this to look realistic. That's why I've added this second list item so I actually have something to look at when writing the styles.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"It's not a bad idea to add a third item either.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"I think it probably would've been fine to just use two items but three is definitely not worse, and since I seem to be having no trouble making up arbitrary things to type, I might as well include it.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"After this sort of list I usually have a closing statement or paragraph, because it kinda looks weird jumping right to a heading.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"code-should-look-okay-by-default\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#code-should-look-okay-by-default\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Code should look okay by default.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I think most people are going to use \",(0,n.jsx)(e.a,{href:\"https://highlightjs.org/\",children:\"highlight.js\"}),\" or \",(0,n.jsx)(e.a,{href:\"https://prismjs.com/\",children:\"Prism\"}),\" or something if they want to style their code blocks but it wouldn't hurt to make them look \",(0,n.jsx)(e.em,{children:\"okay\"}),\" out of the box, even with no syntax highlighting.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here's what a default \",(0,n.jsx)(e.code,{children:\"tailwind.config.js\"}),\" file looks like at the time of writing:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"js\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"js\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#79C0FF\"},children:\"module\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\".\"}),(0,n.jsx)(e.span,{style:{color:\"#79C0FF\"},children:\"exports\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#FF7B72\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\" {\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  purge: [],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  theme: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    extend: {},\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  variants: {},\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  plugins: [],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Hopefully that looks good enough to you.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-about-nested-lists\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#what-about-nested-lists\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What about nested lists?\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Nested lists basically always look bad which is why editors like Medium don't even let you do it, but I guess since some of you goofballs are going to do it we have to carry the burden of at least making it work.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Nested lists are rarely a good idea.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:'You might feel like you are being really \"organized\" or something but you are just creating a gross shape on the screen that is hard to read.'}),`\n`,(0,n.jsx)(e.li,{children:\"Nested navigation in UIs is a bad idea too, keep things as flat as possible.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Nesting tons of folders in your source code is also not helpful.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Since we need to have more items, here's another one.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"I'm not sure if we'll bother styling more than two levels deep.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Two is already too much, three is guaranteed to be a bad idea.\"}),`\n`,(0,n.jsx)(e.li,{children:\"If you nest four levels deep you belong in prison.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Two items isn't really a list, three is good though.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Again please don't nest lists if you want people to actually read your content.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Nobody wants to look at this.\"}),`\n`,(0,n.jsx)(e.li,{children:\"I'm upset that we even have to bother styling this.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The most annoying thing about lists in Markdown is that \",(0,n.jsx)(e.code,{children:\"<li>\"}),\" elements aren't given a child \",(0,n.jsx)(e.code,{children:\"<p>\"}),\" tag unless there are multiple paragraphs in the list item. That means I have to worry about styling that annoying situation too.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"For example, here's another nested list.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"But this time with a second paragraph.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"These list items won't have \",(0,n.jsx)(e.code,{children:\"<p>\"}),\" tags\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Because they are only one line each\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"But in this second top-level list item, they will.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This is especially annoying because of the spacing on this paragraph.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"As you can see here, because I've added a second line, this list item now has a \",(0,n.jsx)(e.code,{children:\"<p>\"}),\" tag.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This is the second line I'm talking about by the way.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Finally here's another list item so it's more like a list.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"A closing list item, but with no nested list, because why not?\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"And finally a sentence to close off this section.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"there-are-other-elements-we-need-to-style\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#there-are-other-elements-we-need-to-style\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"There are other elements we need to style\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I almost forgot to mention links, like \",(0,n.jsx)(e.a,{href:\"https://tailwindcss.com\",children:\"this link to the Tailwind CSS website\"}),\". We almost made them blue but that's so yesterday, so we went with dark gray, feels edgier.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We even included table styles, check it out:\"}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Wrestler\"}),(0,n.jsx)(e.th,{children:\"Origin\"}),(0,n.jsx)(e.th,{children:\"Finisher\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:'Bret \"The Hitman\" Hart'}),(0,n.jsx)(e.td,{children:\"Calgary, AB\"}),(0,n.jsx)(e.td,{children:\"Sharpshooter\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Stone Cold Steve Austin\"}),(0,n.jsx)(e.td,{children:\"Austin, TX\"}),(0,n.jsx)(e.td,{children:\"Stone Cold Stunner\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Randy Savage\"}),(0,n.jsx)(e.td,{children:\"Sarasota, FL\"}),(0,n.jsx)(e.td,{children:\"Elbow Drop\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Vader\"}),(0,n.jsx)(e.td,{children:\"Boulder, CO\"}),(0,n.jsx)(e.td,{children:\"Vader Bomb\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Razor Ramon\"}),(0,n.jsx)(e.td,{children:\"Chuluota, FL\"}),(0,n.jsx)(e.td,{children:\"Razor's Edge\"})]})]})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We also need to make sure inline code looks good, like if I wanted to talk about \",(0,n.jsx)(e.code,{children:\"<span>\"}),\" elements or tell you the good news about \",(0,n.jsx)(e.code,{children:\"@tailwindcss/typography\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"sometimes-i-even-use-code-in-headings\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#sometimes-i-even-use-code-in-headings\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Sometimes I even use \",(0,n.jsx)(e.code,{children:\"code\"}),\" in headings\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Even though it's probably a bad idea, and historically I've had a hard time making it look good. This \",(0,n.jsx)(e.em,{children:'\"wrap the code blocks in backticks\"'}),\" trick works pretty well though really.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Another thing I've done in the past is put a \",(0,n.jsx)(e.code,{children:\"code\"}),\" tag inside of a link, like if I wanted to tell you about the \",(0,n.jsx)(e.a,{href:\"https://github.com/tailwindcss/docs\",children:(0,n.jsx)(e.code,{children:\"tailwindcss/docs\"})}),\" repository. I don't love that there is an underline below the backticks but it is absolutely not worth the madness it would require to avoid it.\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"we-havent-used-an-h4-yet\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#we-havent-used-an-h4-yet\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"We haven't used an \",(0,n.jsx)(e.code,{children:\"h4\"}),\" yet\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"But now we have. Please don't use \",(0,n.jsx)(e.code,{children:\"h5\"}),\" or \",(0,n.jsx)(e.code,{children:\"h6\"}),\" in your content, Medium only supports two heading levels for a reason, you animals. I honestly considered using a \",(0,n.jsx)(e.code,{children:\"before\"}),\" pseudo-element to scream at you if you use an \",(0,n.jsx)(e.code,{children:\"h5\"}),\" or \",(0,n.jsx)(e.code,{children:\"h6\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We don't style them at all out of the box because \",(0,n.jsx)(e.code,{children:\"h4\"}),\" elements are already so small that they are the same size as the body copy. What are we supposed to do with an \",(0,n.jsx)(e.code,{children:\"h5\"}),\", make it \",(0,n.jsx)(e.em,{children:\"smaller\"}),\" than the body copy? No thanks.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"we-still-need-to-think-about-stacked-headings-though\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#we-still-need-to-think-about-stacked-headings-though\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"We still need to think about stacked headings though.\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"lets-make-sure-we-dont-screw-that-up-with-h4-elements-either\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#lets-make-sure-we-dont-screw-that-up-with-h4-elements-either\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Let's make sure we don't screw that up with \",(0,n.jsx)(e.code,{children:\"h4\"}),\" elements, either.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Phew, with any luck we have styled the headings above this text and they look pretty good.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let's add a closing paragraph here so things end with a decently sized block of text. I can't explain why I want things to end that way but I have to assume it's because I think things will look weird or unbalanced if there is a heading too close to the end of the document.\"}),`\n`,(0,n.jsx)(e.p,{children:\"What I've written here is probably long enough, but adding this final sentence can't hurt.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"github-flavored-markdown\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#github-flavored-markdown\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"GitHub Flavored Markdown\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I've also added support for GitHub Flavored Mardown using \",(0,n.jsx)(e.code,{children:\"remark-gfm\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"With \",(0,n.jsx)(e.code,{children:\"remark-gfm\"}),\", we get a few extra features in our markdown. Example: autolink literals.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A link like \",(0,n.jsx)(e.a,{href:\"http://www.example.com\",children:\"www.example.com\"}),\" or \",(0,n.jsx)(e.a,{href:\"https://example.com\",children:\"https://example.com\"}),\" would automatically be converted into an \",(0,n.jsx)(e.code,{children:\"a\"}),\" tag.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This works for email links too: \",(0,n.jsx)(e.a,{href:\"mailto:contact@example.com\",children:\"contact@example.com\"}),\".\"]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var I=D;function c(t,e,i){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(i?\"\\nIt\\u2019s referenced in your code at `\"+i+\"` in `/Users/janitor/resite/content/blog/_mdx_bundler_entry_point-cf3eb5eb-0786-4d81-8339-4e5c24baf2b0.mdx`\":\"\"))}return k(N);})();\n;return Component;"
    },
    "_id": "blog/dynamic-routing-static-regeneration.mdx",
    "_raw": {
      "sourceFilePath": "blog/dynamic-routing-static-regeneration.mdx",
      "sourceFileName": "dynamic-routing-static-regeneration.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/dynamic-routing-static-regeneration"
    },
    "type": "Post",
    "slug": "/blog/dynamic-routing-static-regeneration",
    "slugAsParams": "dynamic-routing-static-regeneration"
  },
  {
    "title": "Preview Mode for Headless CMS",
    "description": "How to implement preview mode in your headless CMS.",
    "date": "2023-04-09T00:00:00.000Z",
    "published": true,
    "image": "/images/blog/blog-post-1.jpg",
    "authors": [
      "shadcn"
    ],
    "body": {
      "raw": "\n<Callout>\n  The text below is from the [Tailwind\n  CSS](https://play.tailwindcss.com/uj1vGACRJA?layout=preview) docs. I copied it\n  here to test the markdown styles. **Tailwind is awesome. You should use it.**\n</Callout>\n\nUntil now, trying to style an article, document, or blog post with Tailwind has been a tedious task that required a keen eye for typography and a lot of complex custom CSS.\n\nBy default, Tailwind removes all of the default browser styling from paragraphs, headings, lists and more. This ends up being really useful for building application UIs because you spend less time undoing user-agent styles, but when you _really are_ just trying to style some content that came from a rich-text editor in a CMS or a markdown file, it can be surprising and unintuitive.\n\nWe get lots of complaints about it actually, with people regularly asking us things like:\n\n> Why is Tailwind removing the default styles on my `h1` elements? How do I disable this? What do you mean I lose all the other base styles too?\n> We hear you, but we're not convinced that simply disabling our base styles is what you really want. You don't want to have to remove annoying margins every time you use a `p` element in a piece of your dashboard UI. And I doubt you really want your blog posts to use the user-agent styles either — you want them to look _awesome_, not awful.\n\nThe `@tailwindcss/typography` plugin is our attempt to give you what you _actually_ want, without any of the downsides of doing something stupid like disabling our base styles.\n\nIt adds a new `prose` class that you can slap on any block of vanilla HTML content and turn it into a beautiful, well-formatted document:\n\n```html\n<article class=\"prose\">\n  <h1>Garlic bread with cheese: What the science tells us</h1>\n  <p>\n    For years parents have espoused the health benefits of eating garlic bread\n    with cheese to their children, with the food earning such an iconic status\n    in our culture that kids will often dress up as warm, cheesy loaf for\n    Halloween.\n  </p>\n  <p>\n    But a recent study shows that the celebrated appetizer may be linked to a\n    series of rabies cases springing up around the country.\n  </p>\n</article>\n```\n\nFor more information about how to use the plugin and the features it includes, [read the documentation](https://github.com/tailwindcss/typography/blob/master/README.md).\n\n---\n\n## What to expect from here on out\n\nWhat follows from here is just a bunch of absolute nonsense I've written to dogfood the plugin itself. It includes every sensible typographic element I could think of, like **bold text**, unordered lists, ordered lists, code blocks, block quotes, _and even italics_.\n\nIt's important to cover all of these use cases for a few reasons:\n\n1.  We want everything to look good out of the box.\n2.  Really just the first reason, that's the whole point of the plugin.\n3.  Here's a third pretend reason though a list with three items looks more realistic than a list with two items.\n\nNow we're going to try out another header style.\n\n### Typography should be easy\n\nSo that's a header for you — with any luck if we've done our job correctly that will look pretty reasonable.\n\nSomething a wise person once told me about typography is:\n\n> Typography is pretty important if you don't want your stuff to look like trash. Make it good then it won't be bad.\n\nIt's probably important that images look okay here by default as well:\n\n<Image\n  src=\"/images/blog/blog-post-4.jpg\"\n  width=\"718\"\n  height=\"404\"\n  alt=\"Image\"\n/>\n\nContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.\n\nNow I'm going to show you an example of an unordered list to make sure that looks good, too:\n\n- So here is the first item in this list.\n- In this example we're keeping the items short.\n- Later, we'll use longer, more complex list items.\n\nAnd that's the end of this section.\n\n## What if we stack headings?\n\n### We should make sure that looks good, too.\n\nSometimes you have headings directly underneath each other. In those cases you often have to undo the top margin on the second heading because it usually looks better for the headings to be closer together than a paragraph followed by a heading should be.\n\n### When a heading comes after a paragraph …\n\nWhen a heading comes after a paragraph, we need a bit more space, like I already mentioned above. Now let's see what a more complex list would look like.\n\n- **I often do this thing where list items have headings.**\n\n  For some reason I think this looks cool which is unfortunate because it's pretty annoying to get the styles right.\n\n  I often have two or three paragraphs in these list items, too, so the hard part is getting the spacing between the paragraphs, list item heading, and separate list items to all make sense. Pretty tough honestly, you could make a strong argument that you just shouldn't write this way.\n\n- **Since this is a list, I need at least two items.**\n\n  I explained what I'm doing already in the previous list item, but a list wouldn't be a list if it only had one item, and we really want this to look realistic. That's why I've added this second list item so I actually have something to look at when writing the styles.\n\n- **It's not a bad idea to add a third item either.**\n\n  I think it probably would've been fine to just use two items but three is definitely not worse, and since I seem to be having no trouble making up arbitrary things to type, I might as well include it.\n\nAfter this sort of list I usually have a closing statement or paragraph, because it kinda looks weird jumping right to a heading.\n\n## Code should look okay by default.\n\nI think most people are going to use [highlight.js](https://highlightjs.org/) or [Prism](https://prismjs.com/) or something if they want to style their code blocks but it wouldn't hurt to make them look _okay_ out of the box, even with no syntax highlighting.\n\nHere's what a default `tailwind.config.js` file looks like at the time of writing:\n\n```js\nmodule.exports = {\n  purge: [],\n  theme: {\n    extend: {},\n  },\n  variants: {},\n  plugins: [],\n}\n```\n\nHopefully that looks good enough to you.\n\n### What about nested lists?\n\nNested lists basically always look bad which is why editors like Medium don't even let you do it, but I guess since some of you goofballs are going to do it we have to carry the burden of at least making it work.\n\n1.  **Nested lists are rarely a good idea.**\n    - You might feel like you are being really \"organized\" or something but you are just creating a gross shape on the screen that is hard to read.\n    - Nested navigation in UIs is a bad idea too, keep things as flat as possible.\n    - Nesting tons of folders in your source code is also not helpful.\n2.  **Since we need to have more items, here's another one.**\n    - I'm not sure if we'll bother styling more than two levels deep.\n    - Two is already too much, three is guaranteed to be a bad idea.\n    - If you nest four levels deep you belong in prison.\n3.  **Two items isn't really a list, three is good though.**\n    - Again please don't nest lists if you want people to actually read your content.\n    - Nobody wants to look at this.\n    - I'm upset that we even have to bother styling this.\n\nThe most annoying thing about lists in Markdown is that `<li>` elements aren't given a child `<p>` tag unless there are multiple paragraphs in the list item. That means I have to worry about styling that annoying situation too.\n\n- **For example, here's another nested list.**\n\n  But this time with a second paragraph.\n\n  - These list items won't have `<p>` tags\n  - Because they are only one line each\n\n- **But in this second top-level list item, they will.**\n\n  This is especially annoying because of the spacing on this paragraph.\n\n  - As you can see here, because I've added a second line, this list item now has a `<p>` tag.\n\n    This is the second line I'm talking about by the way.\n\n  - Finally here's another list item so it's more like a list.\n\n- A closing list item, but with no nested list, because why not?\n\nAnd finally a sentence to close off this section.\n\n## There are other elements we need to style\n\nI almost forgot to mention links, like [this link to the Tailwind CSS website](https://tailwindcss.com). We almost made them blue but that's so yesterday, so we went with dark gray, feels edgier.\n\nWe even included table styles, check it out:\n\n| Wrestler                | Origin       | Finisher           |\n| ----------------------- | ------------ | ------------------ |\n| Bret \"The Hitman\" Hart  | Calgary, AB  | Sharpshooter       |\n| Stone Cold Steve Austin | Austin, TX   | Stone Cold Stunner |\n| Randy Savage            | Sarasota, FL | Elbow Drop         |\n| Vader                   | Boulder, CO  | Vader Bomb         |\n| Razor Ramon             | Chuluota, FL | Razor's Edge       |\n\nWe also need to make sure inline code looks good, like if I wanted to talk about `<span>` elements or tell you the good news about `@tailwindcss/typography`.\n\n### Sometimes I even use `code` in headings\n\nEven though it's probably a bad idea, and historically I've had a hard time making it look good. This _\"wrap the code blocks in backticks\"_ trick works pretty well though really.\n\nAnother thing I've done in the past is put a `code` tag inside of a link, like if I wanted to tell you about the [`tailwindcss/docs`](https://github.com/tailwindcss/docs) repository. I don't love that there is an underline below the backticks but it is absolutely not worth the madness it would require to avoid it.\n\n#### We haven't used an `h4` yet\n\nBut now we have. Please don't use `h5` or `h6` in your content, Medium only supports two heading levels for a reason, you animals. I honestly considered using a `before` pseudo-element to scream at you if you use an `h5` or `h6`.\n\nWe don't style them at all out of the box because `h4` elements are already so small that they are the same size as the body copy. What are we supposed to do with an `h5`, make it _smaller_ than the body copy? No thanks.\n\n### We still need to think about stacked headings though.\n\n#### Let's make sure we don't screw that up with `h4` elements, either.\n\nPhew, with any luck we have styled the headings above this text and they look pretty good.\n\nLet's add a closing paragraph here so things end with a decently sized block of text. I can't explain why I want things to end that way but I have to assume it's because I think things will look weird or unbalanced if there is a heading too close to the end of the document.\n\nWhat I've written here is probably long enough, but adding this final sentence can't hurt.\n\n## GitHub Flavored Markdown\n\nI've also added support for GitHub Flavored Mardown using `remark-gfm`.\n\nWith `remark-gfm`, we get a few extra features in our markdown. Example: autolink literals.\n\nA link like www.example.com or https://example.com would automatically be converted into an `a` tag.\n\nThis works for email links too: contact@example.com.\n",
      "code": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!g.call(t,a)&&a!==i&&o(t,a,{get:()=>e[a],enumerable:!(l=u(e,a))||l.enumerable});return t};var f=(t,e,i)=>(i=t!=null?p(y(t)):{},s(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),k=t=>s(o({},\"__esModule\",{value:!0}),t);var h=w((x,r)=>{r.exports=_jsx_runtime});var N={};b(N,{default:()=>I,frontmatter:()=>v});var n=f(h()),v={title:\"Preview Mode for Headless CMS\",description:\"How to implement preview mode in your headless CMS.\",date:\"2023-04-09\",image:\"/images/blog/blog-post-1.jpg\",authors:[\"shadcn\"]};function d(t){let e=Object.assign({p:\"p\",a:\"a\",strong:\"strong\",em:\"em\",blockquote:\"blockquote\",code:\"code\",div:\"div\",pre:\"pre\",span:\"span\",hr:\"hr\",h2:\"h2\",ol:\"ol\",li:\"li\",h3:\"h3\",ul:\"ul\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",h4:\"h4\"},t.components),{Callout:i,Image:l}=e;return i||c(\"Callout\",!0,\"10:1-14:11\"),l||c(\"Image\",!0,\"71:1-76:3\"),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i,{children:(0,n.jsxs)(e.p,{children:[\"The text below is from the \",(0,n.jsx)(e.a,{href:\"https://play.tailwindcss.com/uj1vGACRJA?layout=preview\",children:`Tailwind\nCSS`}),` docs. I copied it\nhere to test the markdown styles. `,(0,n.jsx)(e.strong,{children:\"Tailwind is awesome. You should use it.\"})]})}),`\n`,(0,n.jsx)(e.p,{children:\"Until now, trying to style an article, document, or blog post with Tailwind has been a tedious task that required a keen eye for typography and a lot of complex custom CSS.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"By default, Tailwind removes all of the default browser styling from paragraphs, headings, lists and more. This ends up being really useful for building application UIs because you spend less time undoing user-agent styles, but when you \",(0,n.jsx)(e.em,{children:\"really are\"}),\" just trying to style some content that came from a rich-text editor in a CMS or a markdown file, it can be surprising and unintuitive.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We get lots of complaints about it actually, with people regularly asking us things like:\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Why is Tailwind removing the default styles on my \",(0,n.jsx)(e.code,{children:\"h1\"}),` elements? How do I disable this? What do you mean I lose all the other base styles too?\nWe hear you, but we're not convinced that simply disabling our base styles is what you really want. You don't want to have to remove annoying margins every time you use a `,(0,n.jsx)(e.code,{children:\"p\"}),\" element in a piece of your dashboard UI. And I doubt you really want your blog posts to use the user-agent styles either \\u2014 you want them to look \",(0,n.jsx)(e.em,{children:\"awesome\"}),\", not awful.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"@tailwindcss/typography\"}),\" plugin is our attempt to give you what you \",(0,n.jsx)(e.em,{children:\"actually\"}),\" want, without any of the downsides of doing something stupid like disabling our base styles.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It adds a new \",(0,n.jsx)(e.code,{children:\"prose\"}),\" class that you can slap on any block of vanilla HTML content and turn it into a beautiful, well-formatted document:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"html\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"html\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"<\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"article\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#79C0FF\"},children:\"class\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#A5D6FF\"},children:'\"prose\"'}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  <\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"h1\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">Garlic bread with cheese: What the science tells us</\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"h1\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  <\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    For years parents have espoused the health benefits of eating garlic bread\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    with cheese to their children, with the food earning such an iconic status\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    in our culture that kids will often dress up as warm, cheesy loaf for\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    Halloween.\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  </\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  <\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    But a recent study shows that the celebrated appetizer may be linked to a\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    series of rabies cases springing up around the country.\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  </\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"</\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"article\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"For more information about how to use the plugin and the features it includes, \",(0,n.jsx)(e.a,{href:\"https://github.com/tailwindcss/typography/blob/master/README.md\",children:\"read the documentation\"}),\".\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{id:\"what-to-expect-from-here-on-out\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#what-to-expect-from-here-on-out\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What to expect from here on out\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"What follows from here is just a bunch of absolute nonsense I've written to dogfood the plugin itself. It includes every sensible typographic element I could think of, like \",(0,n.jsx)(e.strong,{children:\"bold text\"}),\", unordered lists, ordered lists, code blocks, block quotes, \",(0,n.jsx)(e.em,{children:\"and even italics\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"It's important to cover all of these use cases for a few reasons:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"We want everything to look good out of the box.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Really just the first reason, that's the whole point of the plugin.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Here's a third pretend reason though a list with three items looks more realistic than a list with two items.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Now we're going to try out another header style.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"typography-should-be-easy\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#typography-should-be-easy\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Typography should be easy\"]}),`\n`,(0,n.jsx)(e.p,{children:\"So that's a header for you \\u2014 with any luck if we've done our job correctly that will look pretty reasonable.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Something a wise person once told me about typography is:\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Typography is pretty important if you don't want your stuff to look like trash. Make it good then it won't be bad.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It's probably important that images look okay here by default as well:\"}),`\n`,(0,n.jsx)(l,{src:\"/images/blog/blog-post-4.jpg\",width:\"718\",height:\"404\",alt:\"Image\"}),`\n`,(0,n.jsx)(e.p,{children:\"Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Now I'm going to show you an example of an unordered list to make sure that looks good, too:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"So here is the first item in this list.\"}),`\n`,(0,n.jsx)(e.li,{children:\"In this example we're keeping the items short.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Later, we'll use longer, more complex list items.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"And that's the end of this section.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"what-if-we-stack-headings\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#what-if-we-stack-headings\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What if we stack headings?\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"we-should-make-sure-that-looks-good-too\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#we-should-make-sure-that-looks-good-too\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"We should make sure that looks good, too.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Sometimes you have headings directly underneath each other. In those cases you often have to undo the top margin on the second heading because it usually looks better for the headings to be closer together than a paragraph followed by a heading should be.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"when-a-heading-comes-after-a-paragraph-\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#when-a-heading-comes-after-a-paragraph-\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"When a heading comes after a paragraph \\u2026\"]}),`\n`,(0,n.jsx)(e.p,{children:\"When a heading comes after a paragraph, we need a bit more space, like I already mentioned above. Now let's see what a more complex list would look like.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"I often do this thing where list items have headings.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"For some reason I think this looks cool which is unfortunate because it's pretty annoying to get the styles right.\"}),`\n`,(0,n.jsx)(e.p,{children:\"I often have two or three paragraphs in these list items, too, so the hard part is getting the spacing between the paragraphs, list item heading, and separate list items to all make sense. Pretty tough honestly, you could make a strong argument that you just shouldn't write this way.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Since this is a list, I need at least two items.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"I explained what I'm doing already in the previous list item, but a list wouldn't be a list if it only had one item, and we really want this to look realistic. That's why I've added this second list item so I actually have something to look at when writing the styles.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"It's not a bad idea to add a third item either.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"I think it probably would've been fine to just use two items but three is definitely not worse, and since I seem to be having no trouble making up arbitrary things to type, I might as well include it.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"After this sort of list I usually have a closing statement or paragraph, because it kinda looks weird jumping right to a heading.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"code-should-look-okay-by-default\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#code-should-look-okay-by-default\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Code should look okay by default.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I think most people are going to use \",(0,n.jsx)(e.a,{href:\"https://highlightjs.org/\",children:\"highlight.js\"}),\" or \",(0,n.jsx)(e.a,{href:\"https://prismjs.com/\",children:\"Prism\"}),\" or something if they want to style their code blocks but it wouldn't hurt to make them look \",(0,n.jsx)(e.em,{children:\"okay\"}),\" out of the box, even with no syntax highlighting.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here's what a default \",(0,n.jsx)(e.code,{children:\"tailwind.config.js\"}),\" file looks like at the time of writing:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"js\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"js\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#79C0FF\"},children:\"module\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\".\"}),(0,n.jsx)(e.span,{style:{color:\"#79C0FF\"},children:\"exports\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#FF7B72\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\" {\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  purge: [],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  theme: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    extend: {},\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  variants: {},\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  plugins: [],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Hopefully that looks good enough to you.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-about-nested-lists\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#what-about-nested-lists\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What about nested lists?\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Nested lists basically always look bad which is why editors like Medium don't even let you do it, but I guess since some of you goofballs are going to do it we have to carry the burden of at least making it work.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Nested lists are rarely a good idea.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:'You might feel like you are being really \"organized\" or something but you are just creating a gross shape on the screen that is hard to read.'}),`\n`,(0,n.jsx)(e.li,{children:\"Nested navigation in UIs is a bad idea too, keep things as flat as possible.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Nesting tons of folders in your source code is also not helpful.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Since we need to have more items, here's another one.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"I'm not sure if we'll bother styling more than two levels deep.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Two is already too much, three is guaranteed to be a bad idea.\"}),`\n`,(0,n.jsx)(e.li,{children:\"If you nest four levels deep you belong in prison.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Two items isn't really a list, three is good though.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Again please don't nest lists if you want people to actually read your content.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Nobody wants to look at this.\"}),`\n`,(0,n.jsx)(e.li,{children:\"I'm upset that we even have to bother styling this.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The most annoying thing about lists in Markdown is that \",(0,n.jsx)(e.code,{children:\"<li>\"}),\" elements aren't given a child \",(0,n.jsx)(e.code,{children:\"<p>\"}),\" tag unless there are multiple paragraphs in the list item. That means I have to worry about styling that annoying situation too.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"For example, here's another nested list.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"But this time with a second paragraph.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"These list items won't have \",(0,n.jsx)(e.code,{children:\"<p>\"}),\" tags\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Because they are only one line each\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"But in this second top-level list item, they will.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This is especially annoying because of the spacing on this paragraph.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"As you can see here, because I've added a second line, this list item now has a \",(0,n.jsx)(e.code,{children:\"<p>\"}),\" tag.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This is the second line I'm talking about by the way.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Finally here's another list item so it's more like a list.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"A closing list item, but with no nested list, because why not?\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"And finally a sentence to close off this section.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"there-are-other-elements-we-need-to-style\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#there-are-other-elements-we-need-to-style\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"There are other elements we need to style\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I almost forgot to mention links, like \",(0,n.jsx)(e.a,{href:\"https://tailwindcss.com\",children:\"this link to the Tailwind CSS website\"}),\". We almost made them blue but that's so yesterday, so we went with dark gray, feels edgier.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We even included table styles, check it out:\"}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Wrestler\"}),(0,n.jsx)(e.th,{children:\"Origin\"}),(0,n.jsx)(e.th,{children:\"Finisher\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:'Bret \"The Hitman\" Hart'}),(0,n.jsx)(e.td,{children:\"Calgary, AB\"}),(0,n.jsx)(e.td,{children:\"Sharpshooter\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Stone Cold Steve Austin\"}),(0,n.jsx)(e.td,{children:\"Austin, TX\"}),(0,n.jsx)(e.td,{children:\"Stone Cold Stunner\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Randy Savage\"}),(0,n.jsx)(e.td,{children:\"Sarasota, FL\"}),(0,n.jsx)(e.td,{children:\"Elbow Drop\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Vader\"}),(0,n.jsx)(e.td,{children:\"Boulder, CO\"}),(0,n.jsx)(e.td,{children:\"Vader Bomb\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Razor Ramon\"}),(0,n.jsx)(e.td,{children:\"Chuluota, FL\"}),(0,n.jsx)(e.td,{children:\"Razor's Edge\"})]})]})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We also need to make sure inline code looks good, like if I wanted to talk about \",(0,n.jsx)(e.code,{children:\"<span>\"}),\" elements or tell you the good news about \",(0,n.jsx)(e.code,{children:\"@tailwindcss/typography\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"sometimes-i-even-use-code-in-headings\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#sometimes-i-even-use-code-in-headings\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Sometimes I even use \",(0,n.jsx)(e.code,{children:\"code\"}),\" in headings\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Even though it's probably a bad idea, and historically I've had a hard time making it look good. This \",(0,n.jsx)(e.em,{children:'\"wrap the code blocks in backticks\"'}),\" trick works pretty well though really.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Another thing I've done in the past is put a \",(0,n.jsx)(e.code,{children:\"code\"}),\" tag inside of a link, like if I wanted to tell you about the \",(0,n.jsx)(e.a,{href:\"https://github.com/tailwindcss/docs\",children:(0,n.jsx)(e.code,{children:\"tailwindcss/docs\"})}),\" repository. I don't love that there is an underline below the backticks but it is absolutely not worth the madness it would require to avoid it.\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"we-havent-used-an-h4-yet\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#we-havent-used-an-h4-yet\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"We haven't used an \",(0,n.jsx)(e.code,{children:\"h4\"}),\" yet\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"But now we have. Please don't use \",(0,n.jsx)(e.code,{children:\"h5\"}),\" or \",(0,n.jsx)(e.code,{children:\"h6\"}),\" in your content, Medium only supports two heading levels for a reason, you animals. I honestly considered using a \",(0,n.jsx)(e.code,{children:\"before\"}),\" pseudo-element to scream at you if you use an \",(0,n.jsx)(e.code,{children:\"h5\"}),\" or \",(0,n.jsx)(e.code,{children:\"h6\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We don't style them at all out of the box because \",(0,n.jsx)(e.code,{children:\"h4\"}),\" elements are already so small that they are the same size as the body copy. What are we supposed to do with an \",(0,n.jsx)(e.code,{children:\"h5\"}),\", make it \",(0,n.jsx)(e.em,{children:\"smaller\"}),\" than the body copy? No thanks.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"we-still-need-to-think-about-stacked-headings-though\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#we-still-need-to-think-about-stacked-headings-though\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"We still need to think about stacked headings though.\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"lets-make-sure-we-dont-screw-that-up-with-h4-elements-either\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#lets-make-sure-we-dont-screw-that-up-with-h4-elements-either\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Let's make sure we don't screw that up with \",(0,n.jsx)(e.code,{children:\"h4\"}),\" elements, either.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Phew, with any luck we have styled the headings above this text and they look pretty good.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let's add a closing paragraph here so things end with a decently sized block of text. I can't explain why I want things to end that way but I have to assume it's because I think things will look weird or unbalanced if there is a heading too close to the end of the document.\"}),`\n`,(0,n.jsx)(e.p,{children:\"What I've written here is probably long enough, but adding this final sentence can't hurt.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"github-flavored-markdown\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#github-flavored-markdown\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"GitHub Flavored Markdown\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I've also added support for GitHub Flavored Mardown using \",(0,n.jsx)(e.code,{children:\"remark-gfm\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"With \",(0,n.jsx)(e.code,{children:\"remark-gfm\"}),\", we get a few extra features in our markdown. Example: autolink literals.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A link like \",(0,n.jsx)(e.a,{href:\"http://www.example.com\",children:\"www.example.com\"}),\" or \",(0,n.jsx)(e.a,{href:\"https://example.com\",children:\"https://example.com\"}),\" would automatically be converted into an \",(0,n.jsx)(e.code,{children:\"a\"}),\" tag.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This works for email links too: \",(0,n.jsx)(e.a,{href:\"mailto:contact@example.com\",children:\"contact@example.com\"}),\".\"]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var I=D;function c(t,e,i){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(i?\"\\nIt\\u2019s referenced in your code at `\"+i+\"` in `/Users/janitor/resite/content/blog/_mdx_bundler_entry_point-304129b7-9500-496b-93d3-be676fda07e4.mdx`\":\"\"))}return k(N);})();\n;return Component;"
    },
    "_id": "blog/preview-mode-headless-cms.mdx",
    "_raw": {
      "sourceFilePath": "blog/preview-mode-headless-cms.mdx",
      "sourceFileName": "preview-mode-headless-cms.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/preview-mode-headless-cms"
    },
    "type": "Post",
    "slug": "/blog/preview-mode-headless-cms",
    "slugAsParams": "preview-mode-headless-cms"
  },
  {
    "title": "Rationality is Self-Defeating in Permissionless Systems",
    "description": "How to deploy your Next.js apps on Vercel.",
    "date": "2023-01-02T00:00:00.000Z",
    "published": true,
    "image": "/images/blog/que-eth.png",
    "authors": [
      "Bryan Ford"
    ],
    "body": {
      "raw": "\n<Callout>\n> Many blockchain and cryptocurrency fans seem to prefer building and analyzing\n> decentralized systems in a rational or “greedy behavior” failure model, rather\n> than a Byzantine or “arbitrary behavior” failure model. Many of the same\n> blockchain and cryptocurrency fans also like open, permissionless systems like\n> Bitcoin and Ethereum, which anyone can join and participate in using weak\n> identities such as anonymous cryptography key pairs.\n> _by [Bryan Ford](https://bford.info/) and\n> [Rainer Böhme](https://informationsecurity.uibk.ac.at/people/rainer-boehme/) —\n> [PDF preprint](https://arxiv.org/pdf/1910.08820.pdf) version available_\n</Callout>\n\n\n\nMany blockchain and cryptocurrency fans seem to prefer building and analyzing\ndecentralized systems in a rational or “greedy behavior” failure model, rather\nthan a Byzantine or “arbitrary behavior” failure model. Many of the same\nblockchain and cryptocurrency fans also like open, permissionless systems like\nBitcoin and Ethereum, which anyone can join and participate in using weak\nidentities such as anonymous cryptography key pairs.\n\nWhat most of these heavily-overlapping sets of fans do not seem to realize,\nhowever, is that rationality assumptions are self-defeating in open\npermissionless systems with weak identities. A fairly simple metacircular\nargument – a kind of\n“[Gödel's incompleteness theorem](https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems)\nfor rationality” – shows that for any system _S_ that makes _any_ behavioral\nassumption, including but not limited to a rationality assumption, a rational\nattacker both exists and _has an incentive_ to defeat that behavioral\nassumption, thereby violating that assumption and exhibiting Byzantine behavior\nfrom the perspective of the system.\n\nAs a quick summary of the argument we will expand below, suppose a\npermissionless system like Bitcoin is secure against rational attacks, but has\nsome weakness against irrational Byzantine attacks in which the attacker would\nlose money. Because the system is open, permissionless, and exists within a\nlarger ecosystem, a rational attacker can find ways to “bet against” Bitcoin's\nsecurity in _other_ financially-connected systems (e.g., Ethereum), making a\nprofit _outside of_ Bitcoin on this attack against Bitcoin. An attack that\nappears irrational in the context of Bitcoin may be perfectly rational in the\ncontext of the larger ecosystem.\n\nFor this reason, an open permissionless system designed to be secure only\nagainst rational adversaries is actually just _insecure_, unless it remains\nsecure even when the “rational” participants become fully Byzantine. Given this,\none might as well have designed the permissionless system in a Byzantine model\nin the first place. The rationality assumption offers no actual benefit, but\nmerely can make an insecure system appear secure under flawed analysis.\n\nThis blog post is based partly on ideas in\n[Rainer Böhme's talk](https://web.archive.org/web/20191124192837/https://bdlt.school/files/slides/talk-rainer-b%C3%B6hme-a-primer-on-economics-for-cryptocurrencies.pdf)\nat the recent\n[BDLT Summer School in Vienna](https://web.archive.org/web/20210416231544/https://bdlt.school/).\nWhile formalizing the argument would require some effort, we thought it would be\nworth at least sketching the argument intuitively for the public record.\n\n## Threat Modeling: Honest, Byzantine, and Rational Participants\n\nIn designing or analyzing the security of any decentralized system, we must\ndefine the system's _threat model_, and in particular our assumptions about the\nbehaviors of the participants in the system. An _honest_, _correct_, or\n_altruistic_ participant is one that we assume to follow the system's protocol\nrules as specified, hence representing a “well-behaved” participant exhibiting\nno adversarial behavior.\n\nA _Byzantine_ participant, named after the\n[Byzantine Generals Problem](http://theory.stanford.edu/~trevisan/cs174/byzantine.pdf),\nis one we make _no_ assumptions about. A Byzantine participant can behave in\n_arbitrary_ fashion, without restriction, and hence by definition represents the\nstrongest possible adversary.\n\nWe would like to build systems that could withstand _all_ participants being\nByzantine, but this appears fundamentally impossible. We therefore in practice\nhave to make threshold security assumptions, such as that over two-thirds of the\nparticipants in classic Byzantine consensus protocols are honest, or that the\nparticipants controlling over half the hashpower in Bitcoin are well-behaved.\n\nEven with threshold assumptions, however, building systems that resist Byzantine\nbehavior is extremely difficult, and the resulting systems are often much more\ncomplex and inefficient than systems tolerating weaker adversaries. We may\ntherefore be tempted to improve a design's simplicity or efficiency by making\nstronger assumptions about the behavior of adversarial participants, effectively\nweakening the assumed adversary.\n\n![Types of adversaries](https://bford.info/2019/09/23/rational/adversaries.svg)\n\nOne such popular assumption, especially in economic circles, is _rationality_.\nIn essence, we assume that rational participants may deviate from the rules in\narbitrary ways but _only when doing so is in their economic self-interest_,\nimproving their expected rewards – usually but not always financial – in\ncomparison with following the rules honestly.\n\nBy assuming that adversarial participants are rational rather than Byzantine, we\nneed not secure the system against _all_ possible participant behaviors, such as\nagainst participants who pay money with no reward merely to sow chaos and\ndestruction. Instead, we merely need to prove that the system is _incentive\ncompatible_, for example by showing that its rules represent a Nash equilibrium,\nin which deviations from the equilibrium will not give participants a greater\nfinancial reward.\n\nBesides simplicity and efficiency, another appeal of rationality assumptions is\nthe promise of _strengthening_ the system's security by lowering the threshold\nof participants we assume to be fully honest. To circumvent the classical\nByzantine consensus requirement that fewer than one third of participants may be\nfaulty, for example, we might hope to tolerate closer to 50%, or even 100%, of\nparticipants being “adversarial” if we assume they are rational and not\nByzantine. Work on\n[the BAR model (Byzantine-Altruistic-Rational)](http://www.cs.utexas.edu/~lorenzo/papers/sosp05.pdf)\nand\n[_(k,t)_\\-robustness](http://www.cs.utexas.edu/~lorenzo/papers/Abraham11Distributed.pdf)\nexemplifies this goal, which sometimes appears achievable in closed systems with\nstrong identities. But a direct implication of our metacircular argument is that\nan _open_ system cannot generally be secure if all participants are either\nByzantine or rational.\n\n## Assumptions Underlying the Argument\n\nThe metacircular argument makes three main assumptions.\n\nFirst, the system _S_ under consideration is open and permissionless, allowing\nanyone to join and participate in the system using only weak, anonymous\nidentities such as bare cryptographic key pairs. Identities in _S_ need not even\nbe costless provided their price is modest: the argument still works even if _S_\nimposes membership fees or requires new wallet keys to be “mined”, for example.\nProof-of-Work cryptocurrencies such as Bitcoin and Ethereum, Proof-of-Stake\nsystems such as Algorand and Ouroboros, and most other permissionless systems\nseem to satisfy this openness property. Because participation is open to anyone\nglobally and can be anonymous, we cannot reasonably expect police or governments\nto protect _S_ from attack: even if they wanted to and considered it their job,\nthey would not be able to find or discipline a smart rational attacker who might\nbe attacking from anywhere around the globe, especially from a country with weak\ninternational agreements and extradition rules. Thus, _S_ must “stand on its\nown”, by successfully either withstanding or disincentivizing attacks coming\nfrom anywhere. (And it will turn out that merely disincentivizing such attacks\nis impossible.)\n\nSecond, the system _S_ does not control a majority of total economic power or\nvalue in the world: i.e., it is not totally economically dominant from a global\nperspective. Instead, there may be (and probably are) actors outside of _S_ who,\nif rationally incentivized to do so, can at least temporarily muster an amount\nof economic power outside of _S_ comparable to or greater than the economic\nvalue within or controlled by _S_. In other words, we assume that _S_ is not the\n“biggest fish in the ocean.” Given that there can be at most one globally\ndominant economic system at a time, it seems neither useful nor advisable to\ndesign systems that are secure only when they are the biggest fish in the ocean,\nbecause almost always they are not.\n\nThird, the system _S_ actually _leverages_ in some fashion the behavioral\nassumption(s) it makes on participants, such as a rationality assumption. That\nis, we assume there exist one or more (arbitrary) behavioral strategies that _S_\nassumes some participants _will not_ follow, such as economically-losing\nbehaviors in the case of rationality. Further, we assume there exists such an\nassumption-violating strategy that will cause _S_ to malfunction or otherwise\ndeviate observably from its correct operation. In fact, we need not assume that\nthis deviant behavior will _always_ succeed in breaking _S_, but only that it\nwill non-negligibly _raise the probability_ of _S_ failing. If this were not the\ncase, and _S_ in fact operates correctly, securely, and indistinguishably from\nits ideal even if participants do violate their behavioral assumptions, then _S_\nis actually Byzantine secure after all. In that case, _S_ is not actually\nbenefiting from its assumptions about participant behavior, which are redundant\nand thus may be simply discarded.\n\n## The Metacircular Argument: Rational Attacks on Rationality\n\nSuppose permissionless system _S_ is launched, and operates smoothly for some\ntime, with all participants conforming to _S_'s assumptions about them. Because\n_S_ is permissionless (assumption 1) and exists in a larger open world\n(assumption 2), new rational participants may arrive at any time, attracted by\n_S_'s success and presumably growing economic value provided there is an\nopportunity to profit from doing so.\n\nConsider a particular newly-arriving participant _P_. _P_ could of course play\nby the rules _S_ assumes of _P_, in which case the greatest immediate economic\nbenefit _P_ could derive from participating in _S_ is some fraction of the total\neconomic value currently embodied in _S_ (e.g., its market cap). For most\nrealistic permissionless systems embodying strong founders' or early-adopters'\nrewards, if _P_ is not one of the original founders of _S_ but arrives\nsubstantially after launch, then _P_'s near-term payoff prospectives from\njoining _S_ is likely bounded to a fairly _small_ fraction of _S_'s total value.\nBut what if there were another strategy _P_ could take, for perfectly _rational_\nand economically-motivated reasons, by which _P_ could in relatively short order\nacquire a _large_ fraction of _S_'s total value?\n\n![Open world with S and S'](https://bford.info/2019/09/23/rational/open-world.svg)\n\nBecause _S_ is permissionless and operating in a larger open world, _P_ is not\nconfined to operating exclusively within the boundaries of _S_. _P_ can also\nmake use of facilities external to _S_. By assumption 2, _P_ may in particular\nhave access to, or be able to borrow temporarily, financial resources comparable\nto or larger than the total value of _S_.\n\nSuppose the facilities external to _S_ include another Ethereum-like\ncryptocurrency _S'_, which includes a smart contract facility with which\ndecentralized exchanges, futures markets, and the like may be implemented. (This\nis not really a separate assumption because even if _S'_ did not already exist,\n_P_ could create and launch it, given sufficient economic resources under\nassumption 2.) Further, suppose that someone (perhaps _P_) has created on\nexternal system _S'_ a decentralized exchange, futures market, or any other\nmechanism by which tokens representing shares of the value of _S_ may be traded\nor speculated upon in the context of _S'_: e.g., a series of tradeable Ethereum\ntokens pegged to _S_'s cryptocurrency or stake units.\n\nNow suppose participant _P_ finds some behavioral strategy that system _S_\ndepends on participants _not_ exhibiting, and that will observably break _S_ –\nor even that just _might_ break _S_ with significant non-negligible probability.\nAssumption 3 above guarantees the existence of such a behavioral strategy,\nunless _S_'s rationality assumptions were in fact redundant and worthless. _P_\nmust merely be clever enough to find and implement such a strategy. It is\npossible this strategy might first require _P_ to pretend to be one or more\nwell-behaved participants of _S_ for a while, to build up the necessary\nreputation or otherwise get correctly positioned in _S_'s state space; a bit of\npatience and persistence on _P_'s part will satisfy this requirement. _P_ may\nalso have to “buy into” _S_ enough to surmount any entry costs or stake\nthresholds _S_ might impose; the external funds _P_ can invoke or borrow by\nassumption 2 can satisfy this requirement, and are bounded by the total value of\n_S_. In general, _S_'s openness by assumption 1 and the existence of a\ncorrectness-violating strategy by assumption 3 ensures that there exists some\ncourse of action and supply of external resources by which _P_ can position\nitself to violate _S_'s behavioral assumption.\n\nIn addition to infiltrating and positioning itself within _S_, _P_ also invokes\nor borrows enough external funds and uses them to short-sell (bet against)\nshares of _S_'s value massively in the context of the external system _S'_,\nwhich (unlike _S_) _P_ trusts will remain operational and hold its value\nindependently of _S_. Provided _P_ reaches this short-selling position gradually\nand carefully enough to avoid revealing its strategy early, the funds _P_ must\ninvoke or borrow for this purpose must be bounded by some fraction of the total\neconomic value of _S_. And provided there are at least some participants and/or\nobservers of _S_ who believe that _S_ is secure and will remain operating\ncorrectly, and are willing to bet to that effect on _S'_, _P_ will eventually be\nable to build its short position.\n\nFinally, once _P_ is positioned correctly within both _S_ and _S'_, _P_ then\nlaunches its assumption-violating behavior in _S_ that will observably cause _S_\nto fail as per assumption 2. This might manifest as a denial-of-service attack,\na correctness attack, or in any other fashion. The only requirement is that\n_P_'s behavior creates an _observable_ failure, which a nontrivial number of the\nexisting participants in _S_ believed would not happen because they believed in\n_S_ and its threat model. The fact that _S_ is now observed to be broken, and\nits basic design assumptions manifestly violated, causes the shares of _S_'s\nvalue to drop precipitously on external market _S'_, on which _P_ takes a\nhandsome profit. Perhaps _S_ recovers and continues, or perhaps it fails\nentirely – but either way, _P_ has essentially transferred a significant\nfraction of system _S_'s economic value from system _S_ itself to _P_'s own\nshort-sold position on external market _S'_. And to do so, _P_ needed only to\nfind a way – any way – to _surprise_ all those who believed _S_ was secure and\nthat its threat model accurately modeled _S_'s real-world participants.\n\nEven if _P_'s assumption-violating behavioral strategy does not break _S_ with\nperfect reliability, but only with some probability, _P_ can still create an\n_expectation_ of positive profit from its attack by hedging its bets\nappropriately on _S'_. _P_ does not need a perfect attack, but merely needs to\npossess the _correct_ knowledge that _S_'s failure probability is much higher\nthan the other participants in _S_ believe it to be – because only _P_ knows\nthat (and precisely when) it will violate _S_'s design assumptions to create\nthat higher failure probability. Furthermore, even if _P_'s attack fails, and\nthe vulnerability it exploits is quickly detected and patched, _P_ may still\nprofit marginally from the market's adjustment to a realization that _S_'s\nfailure probability was (even temporarily) higher than most of _S_'s\nparticipants thought it was.\n\nWithin the context of system _S_, _P_'s behavior manifests as Byzantine\nbehavior, specifically violating the assumptions _S_'s designers thought\nparticipants would not exhibit and thus excluded from _S_'s threat model.\nConsidered in the larger context of the external world in which _S_ is embedded,\nhowever, including the external trading system _S'_, _P_'s behavior is perfectly\nrational and economically-motivated. Thus, the very rationality of _P_ in the\nlarger open world is precisely what motivates _P_ to break, and profit from,\n_S_'s ill-considered assumption that its participants would behave rationally.\n\n## Implications for Practical Systems\n\nThis type of financial attack is by no means entirely theoretical or limited to\nfully-digital systems such as cryptocurrencies. In our scenario, _P_ is\nessentially playing a game closely-analogous to the investors in\n[credit default swaps](https://en.wikipedia.org/wiki/Credit_default_swap) who\nboth contributed to, and profited handsomely from, the\n[2007-2008 financial crisis](https://en.wikipedia.org/wiki/Financial_crisis_of_2007%E2%80%932008),\nas covered more recently in the film\n[The Big Short](<https://en.wikipedia.org/wiki/The_Big_Short_(film)>).\n\nIn the cryptocurrency space, some real-world attacks we are seeing – such as\nincreasingly-common\n[51% attacks](https://cryptoslate.com/prolific-51-attacks-crypto-verge-ethereum-classic-bitcoin-gold-feathercoin-vertcoin/)\n– might be viewed as special cases of this metacircular attack on rationality.\nIt is often claimed that large proof-of-work miners (or proof-of-stake holders)\nwill not attempt 51% attacks because doing so would undermine the value of the\ncryptocurrency in which they by definition hold a large stake, and hence would\nbe “irrational”. But this argument falls apart if the attack allows the large\nstakeholder to reap rewards outside the attacked system, e.g., by defrauding\nexchanges or selling _S_ short in other systems.\n\nExternally-motivated attacks on cryptocurrencies have been predicted before in\nthe form of\n[virtual protest or \"Occupy Bitcoin\" attacks](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2041492),\n[Goldfinger attacks](https://www.econinfosec.org/archive/weis2013/papers/KrollDaveyFeltenWEIS2013.pdf),\n[puzzle transaction attacks](https://www.comp.nus.edu.sg/~prateeks/papers/38Attack.pdf),\n[merged mining attacks](https://www.sba-research.org/wp-content/uploads/publications/201709%20-%20AJudmayer%20-%20CBT_Merged_Mining_camera_ready_final.pdf),\n[hostile blockchain takeovers](https://fc18.ifca.ai/bitcoin/papers/bitcoin18-final17.pdf),\nand out-of-band variants of\n[pay-to-win attacks](https://eprint.iacr.org/2019/775.pdf). All these attacks\nare specific instances of our argument. They have been presented in the\nliterature as open yet solvable challenges. We are not aware, however, of any\nprior attempt to summarize the lessons learned and formulate a general\nimpossibility statement.\n\nFor most practical systems, we do not even know if they are incentive compatible\nin the absence of an external system _S'_ – i.e., where assumption 2 is violated\n– and probably they are not. Almost all game-theoretic treatments of (parts of)\nthe Bitcoin protocol deliver negative results. Many attacks against specific\ncryptocurrency system designs are known to be profitable in expectation, such as\n[ransaction withholding](https://www.avivz.net/pubs/12/Bitcoin_EC0212.pdf),\n[empty block mining](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2407834),\n[selfish mining](https://www.cs.cornell.edu/~ie53/publications/btcProcFC.pdf),\n[block withholding](http://webee.technion.ac.il/people/ittay/publications/btcPoolsSP15.pdf),\n[stubborn mining](https://www.cs.umd.edu/~kartik/papers/5_stubborn_eclipse.pdf),\n[fork after withholding](https://syssec.kaist.ac.kr/pub/2017/kwon_ccs_2017.pdf),\nand [whale attacks](http://www.cs.umd.edu/~jkatz/papers/whale-txs.pdf). It is\nlikely thanks only to frictions such as risk aversion and other costs that we\nrarely observe such attacks in large deployed systems. Many specific attacks do\nnot even depend on assumption 1, underlining the fact that rationality is not a\nsilver bullet even where this metacircular argument does not apply. Where it\ndoes apply, it is more general and effectively _guarantees_ the existence of\nattacks against _all_ open systems that assume participants are rational.\n\nAnother related observation is that financial markets on derivatives of a system\n_S_ mature in the external world (e.g., _S'_) as _S_ grows and becomes more\nrelevant. So in some sense, systems built on the rationality assumption are\ntemporarily more secure only until they become fat enough targets to be eaten by\ntheir own success. We can see this effect, for example, in the growing and\nincreasingly liquid market for hash power, which effectively thwarts\n[Nakamoto’s](https://bitcoin.org/bitcoin.pdf)\n([or Dwork’s](https://link.springer.com/chapter/10.1007/3-540-48071-4_10)) rule\nof thumb that the ratio of processors to individuals varies in a small band.\nSuch dynamics happen in the real world, too. But there they have traditionally\ntaken centuries or decades while in cryptocurrency space everything happens in\ntime-lapse.\n\n## Limitations of the Argument\n\nThis argument is of course currently only a rough and informal sketch. An\nenterprising student might wish to try formalizing it, or maybe someone has\nalready done so but we are unaware of it.\n\nThe metacircular argument certainly does not apply to all cryptocurrencies or\ndecentralized systems. In a permissioned system, for example, in which a closed\ngroup of participants are strongly-identified and subject to legal and\ncontractual agreements with each other, one can hope that the threat of lawsuits\nfor arbitrarily-large damages will keep rational participants incentivized to\nbehave correctly. Similarly, in a national cryptocurrency, which might be\nrelatively open but only to citizens of a given country, and which require\nverified identities with which the police can expect to track down and jail\nmisbehaving participants, this metacircular argument does not necessarily apply.\n\nApart from police enforcement, rationality assumptions may be weakened in other\nways to circumvent the metacircular argument. For example, an open system might\nbe designed according to a “weak rationality” assumption that users need\nincentives to join the system in the first place (e.g., mining rewards in\nBitcoin), but that after having become stakeholders, most will then behave\nhonestly. In this case, rational incentives serve only as a tool for system\ngrowth, but become irrelevant and equivalent to a strong honesty assumption in\nterms of the internal security of the system itself.\n\n## Conclusion: Irrationality Can Be Rational\n\n![Types of adversaries](https://bford.info/2019/09/23/rational/adversaries-open.svg)\n\nWhat many in the cryptocurrency community seem to want is a system that is both\npermissionless and tolerant of strongly-rational behavior – either beyond the\nthresholds a similar a Byzantine system would tolerate (such as a rational\nmajority), or by deriving some simplicity or efficiency benefit from assuming\nrationality. But in an open world in which the permissionless system is not the\nonly game in town, a potential _perfectly rational_ attacker can always exist,\nor appear at any time, whose entirely rational behavior is precisely to profit\nfrom bringing the system down by violating its assumptions on participant\nbehavior.\n\nSo if you think you have designed a permissionless decentralized system that is\ncleverly secured based on rationality assumptions, you haven't. You have merely\nobfuscated the rational attacker's motive and opportunity to profit outside your\nsystem from breaking your rationality assumptions. The only practical way to\neliminate this threat appears to be either to close the system and require\nstrong identities and police protection, or else secure the system against\narbitrary Byzantine behavior, thereby rendering rationality assumptions\nredundant and useless for security.\n\n> _We wish to thank Jeff Allen, Ittay Eyal, Damir Filipovic, Patrik Keller,\n> Alexander Lipton, Andrew Miller, and Haoqian Zhang for helpful feedback on\n> early drafts of this post._\n>\n> _Updated 27-Oct-2019 with link to\n> [PDF preprint](https://arxiv.org/pdf/1910.08820.pdf) version._",
      "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var i in e)r(t,i,{get:e[i],enumerable:!0})},o=(t,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!y.call(t,a)&&a!==i&&r(t,a,{get:()=>e[a],enumerable:!(s=m(e,a))||s.enumerable});return t};var g=(t,e,i)=>(i=t!=null?d(u(t)):{},o(e||!t||!t.__esModule?r(i,\"default\",{value:t,enumerable:!0}):i,t)),w=t=>o(r({},\"__esModule\",{value:!0}),t);var c=f((z,l)=>{l.exports=_jsx_runtime});var B={};b(B,{default:()=>S,frontmatter:()=>v});var n=g(c()),v={title:\"Rationality is Self-Defeating in Permissionless Systems\",description:\"How to deploy your Next.js apps on Vercel.\",image:\"/images/blog/que-eth.png\",date:\"2023-01-02\",authors:[\"Bryan Ford\"]};function h(t){let e=Object.assign({blockquote:\"blockquote\",p:\"p\",em:\"em\",a:\"a\",h2:\"h2\",span:\"span\",img:\"img\"},t.components),{Callout:i}=e;return i||x(\"Callout\",!0,\"10:1-20:11\"),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i,{children:(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`Many blockchain and cryptocurrency fans seem to prefer building and analyzing\ndecentralized systems in a rational or \\u201Cgreedy behavior\\u201D failure model, rather\nthan a Byzantine or \\u201Carbitrary behavior\\u201D failure model. Many of the same\nblockchain and cryptocurrency fans also like open, permissionless systems like\nBitcoin and Ethereum, which anyone can join and participate in using weak\nidentities such as anonymous cryptography key pairs.\n`,(0,n.jsxs)(e.em,{children:[\"by \",(0,n.jsx)(e.a,{href:\"https://bford.info/\",children:\"Bryan Ford\"}),` and\n`,(0,n.jsx)(e.a,{href:\"https://informationsecurity.uibk.ac.at/people/rainer-boehme/\",children:\"Rainer Bo\\u0308hme\"}),` \\u2014\n`,(0,n.jsx)(e.a,{href:\"https://arxiv.org/pdf/1910.08820.pdf\",children:\"PDF preprint\"}),\" version available\"]})]}),`\n`]})}),`\n`,(0,n.jsx)(e.p,{children:`Many blockchain and cryptocurrency fans seem to prefer building and analyzing\ndecentralized systems in a rational or \\u201Cgreedy behavior\\u201D failure model, rather\nthan a Byzantine or \\u201Carbitrary behavior\\u201D failure model. Many of the same\nblockchain and cryptocurrency fans also like open, permissionless systems like\nBitcoin and Ethereum, which anyone can join and participate in using weak\nidentities such as anonymous cryptography key pairs.`}),`\n`,(0,n.jsxs)(e.p,{children:[`What most of these heavily-overlapping sets of fans do not seem to realize,\nhowever, is that rationality assumptions are self-defeating in open\npermissionless systems with weak identities. A fairly simple metacircular\nargument \\u2013 a kind of\n\\u201C`,(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems\",children:\"G\\xF6del's incompleteness theorem\"}),`\nfor rationality\\u201D \\u2013 shows that for any system `,(0,n.jsx)(e.em,{children:\"S\"}),\" that makes \",(0,n.jsx)(e.em,{children:\"any\"}),` behavioral\nassumption, including but not limited to a rationality assumption, a rational\nattacker both exists and `,(0,n.jsx)(e.em,{children:\"has an incentive\"}),` to defeat that behavioral\nassumption, thereby violating that assumption and exhibiting Byzantine behavior\nfrom the perspective of the system.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`As a quick summary of the argument we will expand below, suppose a\npermissionless system like Bitcoin is secure against rational attacks, but has\nsome weakness against irrational Byzantine attacks in which the attacker would\nlose money. Because the system is open, permissionless, and exists within a\nlarger ecosystem, a rational attacker can find ways to \\u201Cbet against\\u201D Bitcoin's\nsecurity in `,(0,n.jsx)(e.em,{children:\"other\"}),` financially-connected systems (e.g., Ethereum), making a\nprofit `,(0,n.jsx)(e.em,{children:\"outside of\"}),` Bitcoin on this attack against Bitcoin. An attack that\nappears irrational in the context of Bitcoin may be perfectly rational in the\ncontext of the larger ecosystem.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`For this reason, an open permissionless system designed to be secure only\nagainst rational adversaries is actually just `,(0,n.jsx)(e.em,{children:\"insecure\"}),`, unless it remains\nsecure even when the \\u201Crational\\u201D participants become fully Byzantine. Given this,\none might as well have designed the permissionless system in a Byzantine model\nin the first place. The rationality assumption offers no actual benefit, but\nmerely can make an insecure system appear secure under flawed analysis.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`This blog post is based partly on ideas in\n`,(0,n.jsx)(e.a,{href:\"https://web.archive.org/web/20191124192837/https://bdlt.school/files/slides/talk-rainer-b%C3%B6hme-a-primer-on-economics-for-cryptocurrencies.pdf\",children:\"Rainer Bo\\u0308hme's talk\"}),`\nat the recent\n`,(0,n.jsx)(e.a,{href:\"https://web.archive.org/web/20210416231544/https://bdlt.school/\",children:\"BDLT Summer School in Vienna\"}),`.\nWhile formalizing the argument would require some effort, we thought it would be\nworth at least sketching the argument intuitively for the public record.`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"threat-modeling-honest-byzantine-and-rational-participants\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#threat-modeling-honest-byzantine-and-rational-participants\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Threat Modeling: Honest, Byzantine, and Rational Participants\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`In designing or analyzing the security of any decentralized system, we must\ndefine the system's `,(0,n.jsx)(e.em,{children:\"threat model\"}),`, and in particular our assumptions about the\nbehaviors of the participants in the system. An `,(0,n.jsx)(e.em,{children:\"honest\"}),\", \",(0,n.jsx)(e.em,{children:\"correct\"}),`, or\n`,(0,n.jsx)(e.em,{children:\"altruistic\"}),` participant is one that we assume to follow the system's protocol\nrules as specified, hence representing a \\u201Cwell-behaved\\u201D participant exhibiting\nno adversarial behavior.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.em,{children:\"Byzantine\"}),` participant, named after the\n`,(0,n.jsx)(e.a,{href:\"http://theory.stanford.edu/~trevisan/cs174/byzantine.pdf\",children:\"Byzantine Generals Problem\"}),`,\nis one we make `,(0,n.jsx)(e.em,{children:\"no\"}),` assumptions about. A Byzantine participant can behave in\n`,(0,n.jsx)(e.em,{children:\"arbitrary\"}),` fashion, without restriction, and hence by definition represents the\nstrongest possible adversary.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We would like to build systems that could withstand \",(0,n.jsx)(e.em,{children:\"all\"}),` participants being\nByzantine, but this appears fundamentally impossible. We therefore in practice\nhave to make threshold security assumptions, such as that over two-thirds of the\nparticipants in classic Byzantine consensus protocols are honest, or that the\nparticipants controlling over half the hashpower in Bitcoin are well-behaved.`]}),`\n`,(0,n.jsx)(e.p,{children:`Even with threshold assumptions, however, building systems that resist Byzantine\nbehavior is extremely difficult, and the resulting systems are often much more\ncomplex and inefficient than systems tolerating weaker adversaries. We may\ntherefore be tempted to improve a design's simplicity or efficiency by making\nstronger assumptions about the behavior of adversarial participants, effectively\nweakening the assumed adversary.`}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://bford.info/2019/09/23/rational/adversaries.svg\",alt:\"Types of adversaries\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"One such popular assumption, especially in economic circles, is \",(0,n.jsx)(e.em,{children:\"rationality\"}),`.\nIn essence, we assume that rational participants may deviate from the rules in\narbitrary ways but `,(0,n.jsx)(e.em,{children:\"only when doing so is in their economic self-interest\"}),`,\nimproving their expected rewards \\u2013 usually but not always financial \\u2013 in\ncomparison with following the rules honestly.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`By assuming that adversarial participants are rational rather than Byzantine, we\nneed not secure the system against `,(0,n.jsx)(e.em,{children:\"all\"}),` possible participant behaviors, such as\nagainst participants who pay money with no reward merely to sow chaos and\ndestruction. Instead, we merely need to prove that the system is `,(0,n.jsx)(e.em,{children:`incentive\ncompatible`}),`, for example by showing that its rules represent a Nash equilibrium,\nin which deviations from the equilibrium will not give participants a greater\nfinancial reward.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Besides simplicity and efficiency, another appeal of rationality assumptions is\nthe promise of `,(0,n.jsx)(e.em,{children:\"strengthening\"}),` the system's security by lowering the threshold\nof participants we assume to be fully honest. To circumvent the classical\nByzantine consensus requirement that fewer than one third of participants may be\nfaulty, for example, we might hope to tolerate closer to 50%, or even 100%, of\nparticipants being \\u201Cadversarial\\u201D if we assume they are rational and not\nByzantine. Work on\n`,(0,n.jsx)(e.a,{href:\"http://www.cs.utexas.edu/~lorenzo/papers/sosp05.pdf\",children:\"the BAR model (Byzantine-Altruistic-Rational)\"}),`\nand\n`,(0,n.jsxs)(e.a,{href:\"http://www.cs.utexas.edu/~lorenzo/papers/Abraham11Distributed.pdf\",children:[(0,n.jsx)(e.em,{children:\"(k,t)\"}),\"-robustness\"]}),`\nexemplifies this goal, which sometimes appears achievable in closed systems with\nstrong identities. But a direct implication of our metacircular argument is that\nan `,(0,n.jsx)(e.em,{children:\"open\"}),` system cannot generally be secure if all participants are either\nByzantine or rational.`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"assumptions-underlying-the-argument\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#assumptions-underlying-the-argument\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Assumptions Underlying the Argument\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The metacircular argument makes three main assumptions.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"First, the system \",(0,n.jsx)(e.em,{children:\"S\"}),` under consideration is open and permissionless, allowing\nanyone to join and participate in the system using only weak, anonymous\nidentities such as bare cryptographic key pairs. Identities in `,(0,n.jsx)(e.em,{children:\"S\"}),` need not even\nbe costless provided their price is modest: the argument still works even if `,(0,n.jsx)(e.em,{children:\"S\"}),`\nimposes membership fees or requires new wallet keys to be \\u201Cmined\\u201D, for example.\nProof-of-Work cryptocurrencies such as Bitcoin and Ethereum, Proof-of-Stake\nsystems such as Algorand and Ouroboros, and most other permissionless systems\nseem to satisfy this openness property. Because participation is open to anyone\nglobally and can be anonymous, we cannot reasonably expect police or governments\nto protect `,(0,n.jsx)(e.em,{children:\"S\"}),` from attack: even if they wanted to and considered it their job,\nthey would not be able to find or discipline a smart rational attacker who might\nbe attacking from anywhere around the globe, especially from a country with weak\ninternational agreements and extradition rules. Thus, `,(0,n.jsx)(e.em,{children:\"S\"}),` must \\u201Cstand on its\nown\\u201D, by successfully either withstanding or disincentivizing attacks coming\nfrom anywhere. (And it will turn out that merely disincentivizing such attacks\nis impossible.)`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Second, the system \",(0,n.jsx)(e.em,{children:\"S\"}),` does not control a majority of total economic power or\nvalue in the world: i.e., it is not totally economically dominant from a global\nperspective. Instead, there may be (and probably are) actors outside of `,(0,n.jsx)(e.em,{children:\"S\"}),` who,\nif rationally incentivized to do so, can at least temporarily muster an amount\nof economic power outside of `,(0,n.jsx)(e.em,{children:\"S\"}),` comparable to or greater than the economic\nvalue within or controlled by `,(0,n.jsx)(e.em,{children:\"S\"}),\". In other words, we assume that \",(0,n.jsx)(e.em,{children:\"S\"}),` is not the\n\\u201Cbiggest fish in the ocean.\\u201D Given that there can be at most one globally\ndominant economic system at a time, it seems neither useful nor advisable to\ndesign systems that are secure only when they are the biggest fish in the ocean,\nbecause almost always they are not.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Third, the system \",(0,n.jsx)(e.em,{children:\"S\"}),\" actually \",(0,n.jsx)(e.em,{children:\"leverages\"}),` in some fashion the behavioral\nassumption(s) it makes on participants, such as a rationality assumption. That\nis, we assume there exist one or more (arbitrary) behavioral strategies that `,(0,n.jsx)(e.em,{children:\"S\"}),`\nassumes some participants `,(0,n.jsx)(e.em,{children:\"will not\"}),` follow, such as economically-losing\nbehaviors in the case of rationality. Further, we assume there exists such an\nassumption-violating strategy that will cause `,(0,n.jsx)(e.em,{children:\"S\"}),` to malfunction or otherwise\ndeviate observably from its correct operation. In fact, we need not assume that\nthis deviant behavior will `,(0,n.jsx)(e.em,{children:\"always\"}),\" succeed in breaking \",(0,n.jsx)(e.em,{children:\"S\"}),`, but only that it\nwill non-negligibly `,(0,n.jsx)(e.em,{children:\"raise the probability\"}),\" of \",(0,n.jsx)(e.em,{children:\"S\"}),` failing. If this were not the\ncase, and `,(0,n.jsx)(e.em,{children:\"S\"}),` in fact operates correctly, securely, and indistinguishably from\nits ideal even if participants do violate their behavioral assumptions, then `,(0,n.jsx)(e.em,{children:\"S\"}),`\nis actually Byzantine secure after all. In that case, `,(0,n.jsx)(e.em,{children:\"S\"}),` is not actually\nbenefiting from its assumptions about participant behavior, which are redundant\nand thus may be simply discarded.`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"the-metacircular-argument-rational-attacks-on-rationality\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#the-metacircular-argument-rational-attacks-on-rationality\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Metacircular Argument: Rational Attacks on Rationality\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Suppose permissionless system \",(0,n.jsx)(e.em,{children:\"S\"}),` is launched, and operates smoothly for some\ntime, with all participants conforming to `,(0,n.jsx)(e.em,{children:\"S\"}),`'s assumptions about them. Because\n`,(0,n.jsx)(e.em,{children:\"S\"}),` is permissionless (assumption 1) and exists in a larger open world\n(assumption 2), new rational participants may arrive at any time, attracted by\n`,(0,n.jsx)(e.em,{children:\"S\"}),`'s success and presumably growing economic value provided there is an\nopportunity to profit from doing so.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Consider a particular newly-arriving participant \",(0,n.jsx)(e.em,{children:\"P\"}),\". \",(0,n.jsx)(e.em,{children:\"P\"}),` could of course play\nby the rules `,(0,n.jsx)(e.em,{children:\"S\"}),\" assumes of \",(0,n.jsx)(e.em,{children:\"P\"}),`, in which case the greatest immediate economic\nbenefit `,(0,n.jsx)(e.em,{children:\"P\"}),\" could derive from participating in \",(0,n.jsx)(e.em,{children:\"S\"}),` is some fraction of the total\neconomic value currently embodied in `,(0,n.jsx)(e.em,{children:\"S\"}),` (e.g., its market cap). For most\nrealistic permissionless systems embodying strong founders' or early-adopters'\nrewards, if `,(0,n.jsx)(e.em,{children:\"P\"}),\" is not one of the original founders of \",(0,n.jsx)(e.em,{children:\"S\"}),` but arrives\nsubstantially after launch, then `,(0,n.jsx)(e.em,{children:\"P\"}),`'s near-term payoff prospectives from\njoining `,(0,n.jsx)(e.em,{children:\"S\"}),\" is likely bounded to a fairly \",(0,n.jsx)(e.em,{children:\"small\"}),\" fraction of \",(0,n.jsx)(e.em,{children:\"S\"}),`'s total value.\nBut what if there were another strategy `,(0,n.jsx)(e.em,{children:\"P\"}),\" could take, for perfectly \",(0,n.jsx)(e.em,{children:\"rational\"}),`\nand economically-motivated reasons, by which `,(0,n.jsx)(e.em,{children:\"P\"}),` could in relatively short order\nacquire a `,(0,n.jsx)(e.em,{children:\"large\"}),\" fraction of \",(0,n.jsx)(e.em,{children:\"S\"}),\"'s total value?\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://bford.info/2019/09/23/rational/open-world.svg\",alt:\"Open world with S and S'\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Because \",(0,n.jsx)(e.em,{children:\"S\"}),\" is permissionless and operating in a larger open world, \",(0,n.jsx)(e.em,{children:\"P\"}),` is not\nconfined to operating exclusively within the boundaries of `,(0,n.jsx)(e.em,{children:\"S\"}),\". \",(0,n.jsx)(e.em,{children:\"P\"}),` can also\nmake use of facilities external to `,(0,n.jsx)(e.em,{children:\"S\"}),\". By assumption 2, \",(0,n.jsx)(e.em,{children:\"P\"}),` may in particular\nhave access to, or be able to borrow temporarily, financial resources comparable\nto or larger than the total value of `,(0,n.jsx)(e.em,{children:\"S\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Suppose the facilities external to \",(0,n.jsx)(e.em,{children:\"S\"}),` include another Ethereum-like\ncryptocurrency `,(0,n.jsx)(e.em,{children:\"S'\"}),`, which includes a smart contract facility with which\ndecentralized exchanges, futures markets, and the like may be implemented. (This\nis not really a separate assumption because even if `,(0,n.jsx)(e.em,{children:\"S'\"}),` did not already exist,\n`,(0,n.jsx)(e.em,{children:\"P\"}),` could create and launch it, given sufficient economic resources under\nassumption 2.) Further, suppose that someone (perhaps `,(0,n.jsx)(e.em,{children:\"P\"}),`) has created on\nexternal system `,(0,n.jsx)(e.em,{children:\"S'\"}),` a decentralized exchange, futures market, or any other\nmechanism by which tokens representing shares of the value of `,(0,n.jsx)(e.em,{children:\"S\"}),` may be traded\nor speculated upon in the context of `,(0,n.jsx)(e.em,{children:\"S'\"}),`: e.g., a series of tradeable Ethereum\ntokens pegged to `,(0,n.jsx)(e.em,{children:\"S\"}),\"'s cryptocurrency or stake units.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now suppose participant \",(0,n.jsx)(e.em,{children:\"P\"}),\" finds some behavioral strategy that system \",(0,n.jsx)(e.em,{children:\"S\"}),`\ndepends on participants `,(0,n.jsx)(e.em,{children:\"not\"}),\" exhibiting, and that will observably break \",(0,n.jsx)(e.em,{children:\"S\"}),` \\u2013\nor even that just `,(0,n.jsx)(e.em,{children:\"might\"}),\" break \",(0,n.jsx)(e.em,{children:\"S\"}),` with significant non-negligible probability.\nAssumption 3 above guarantees the existence of such a behavioral strategy,\nunless `,(0,n.jsx)(e.em,{children:\"S\"}),\"'s rationality assumptions were in fact redundant and worthless. \",(0,n.jsx)(e.em,{children:\"P\"}),`\nmust merely be clever enough to find and implement such a strategy. It is\npossible this strategy might first require `,(0,n.jsx)(e.em,{children:\"P\"}),` to pretend to be one or more\nwell-behaved participants of `,(0,n.jsx)(e.em,{children:\"S\"}),` for a while, to build up the necessary\nreputation or otherwise get correctly positioned in `,(0,n.jsx)(e.em,{children:\"S\"}),`'s state space; a bit of\npatience and persistence on `,(0,n.jsx)(e.em,{children:\"P\"}),\"'s part will satisfy this requirement. \",(0,n.jsx)(e.em,{children:\"P\"}),` may\nalso have to \\u201Cbuy into\\u201D `,(0,n.jsx)(e.em,{children:\"S\"}),` enough to surmount any entry costs or stake\nthresholds `,(0,n.jsx)(e.em,{children:\"S\"}),\" might impose; the external funds \",(0,n.jsx)(e.em,{children:\"P\"}),` can invoke or borrow by\nassumption 2 can satisfy this requirement, and are bounded by the total value of\n`,(0,n.jsx)(e.em,{children:\"S\"}),\". In general, \",(0,n.jsx)(e.em,{children:\"S\"}),`'s openness by assumption 1 and the existence of a\ncorrectness-violating strategy by assumption 3 ensures that there exists some\ncourse of action and supply of external resources by which `,(0,n.jsx)(e.em,{children:\"P\"}),` can position\nitself to violate `,(0,n.jsx)(e.em,{children:\"S\"}),\"'s behavioral assumption.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In addition to infiltrating and positioning itself within \",(0,n.jsx)(e.em,{children:\"S\"}),\", \",(0,n.jsx)(e.em,{children:\"P\"}),` also invokes\nor borrows enough external funds and uses them to short-sell (bet against)\nshares of `,(0,n.jsx)(e.em,{children:\"S\"}),\"'s value massively in the context of the external system \",(0,n.jsx)(e.em,{children:\"S'\"}),`,\nwhich (unlike `,(0,n.jsx)(e.em,{children:\"S\"}),\") \",(0,n.jsx)(e.em,{children:\"P\"}),` trusts will remain operational and hold its value\nindependently of `,(0,n.jsx)(e.em,{children:\"S\"}),\". Provided \",(0,n.jsx)(e.em,{children:\"P\"}),` reaches this short-selling position gradually\nand carefully enough to avoid revealing its strategy early, the funds `,(0,n.jsx)(e.em,{children:\"P\"}),` must\ninvoke or borrow for this purpose must be bounded by some fraction of the total\neconomic value of `,(0,n.jsx)(e.em,{children:\"S\"}),`. And provided there are at least some participants and/or\nobservers of `,(0,n.jsx)(e.em,{children:\"S\"}),\" who believe that \",(0,n.jsx)(e.em,{children:\"S\"}),` is secure and will remain operating\ncorrectly, and are willing to bet to that effect on `,(0,n.jsx)(e.em,{children:\"S'\"}),\", \",(0,n.jsx)(e.em,{children:\"P\"}),` will eventually be\nable to build its short position.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Finally, once \",(0,n.jsx)(e.em,{children:\"P\"}),\" is positioned correctly within both \",(0,n.jsx)(e.em,{children:\"S\"}),\" and \",(0,n.jsx)(e.em,{children:\"S'\"}),\", \",(0,n.jsx)(e.em,{children:\"P\"}),` then\nlaunches its assumption-violating behavior in `,(0,n.jsx)(e.em,{children:\"S\"}),\" that will observably cause \",(0,n.jsx)(e.em,{children:\"S\"}),`\nto fail as per assumption 2. This might manifest as a denial-of-service attack,\na correctness attack, or in any other fashion. The only requirement is that\n`,(0,n.jsx)(e.em,{children:\"P\"}),\"'s behavior creates an \",(0,n.jsx)(e.em,{children:\"observable\"}),` failure, which a nontrivial number of the\nexisting participants in `,(0,n.jsx)(e.em,{children:\"S\"}),` believed would not happen because they believed in\n`,(0,n.jsx)(e.em,{children:\"S\"}),\" and its threat model. The fact that \",(0,n.jsx)(e.em,{children:\"S\"}),` is now observed to be broken, and\nits basic design assumptions manifestly violated, causes the shares of `,(0,n.jsx)(e.em,{children:\"S\"}),`'s\nvalue to drop precipitously on external market `,(0,n.jsx)(e.em,{children:\"S'\"}),\", on which \",(0,n.jsx)(e.em,{children:\"P\"}),` takes a\nhandsome profit. Perhaps `,(0,n.jsx)(e.em,{children:\"S\"}),` recovers and continues, or perhaps it fails\nentirely \\u2013 but either way, `,(0,n.jsx)(e.em,{children:\"P\"}),` has essentially transferred a significant\nfraction of system `,(0,n.jsx)(e.em,{children:\"S\"}),\"'s economic value from system \",(0,n.jsx)(e.em,{children:\"S\"}),\" itself to \",(0,n.jsx)(e.em,{children:\"P\"}),`'s own\nshort-sold position on external market `,(0,n.jsx)(e.em,{children:\"S'\"}),\". And to do so, \",(0,n.jsx)(e.em,{children:\"P\"}),` needed only to\nfind a way \\u2013 any way \\u2013 to `,(0,n.jsx)(e.em,{children:\"surprise\"}),\" all those who believed \",(0,n.jsx)(e.em,{children:\"S\"}),` was secure and\nthat its threat model accurately modeled `,(0,n.jsx)(e.em,{children:\"S\"}),\"'s real-world participants.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Even if \",(0,n.jsx)(e.em,{children:\"P\"}),\"'s assumption-violating behavioral strategy does not break \",(0,n.jsx)(e.em,{children:\"S\"}),` with\nperfect reliability, but only with some probability, `,(0,n.jsx)(e.em,{children:\"P\"}),` can still create an\n`,(0,n.jsx)(e.em,{children:\"expectation\"}),` of positive profit from its attack by hedging its bets\nappropriately on `,(0,n.jsx)(e.em,{children:\"S'\"}),\". \",(0,n.jsx)(e.em,{children:\"P\"}),` does not need a perfect attack, but merely needs to\npossess the `,(0,n.jsx)(e.em,{children:\"correct\"}),\" knowledge that \",(0,n.jsx)(e.em,{children:\"S\"}),`'s failure probability is much higher\nthan the other participants in `,(0,n.jsx)(e.em,{children:\"S\"}),\" believe it to be \\u2013 because only \",(0,n.jsx)(e.em,{children:\"P\"}),` knows\nthat (and precisely when) it will violate `,(0,n.jsx)(e.em,{children:\"S\"}),`'s design assumptions to create\nthat higher failure probability. Furthermore, even if `,(0,n.jsx)(e.em,{children:\"P\"}),`'s attack fails, and\nthe vulnerability it exploits is quickly detected and patched, `,(0,n.jsx)(e.em,{children:\"P\"}),` may still\nprofit marginally from the market's adjustment to a realization that `,(0,n.jsx)(e.em,{children:\"S\"}),`'s\nfailure probability was (even temporarily) higher than most of `,(0,n.jsx)(e.em,{children:\"S\"}),`'s\nparticipants thought it was.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Within the context of system \",(0,n.jsx)(e.em,{children:\"S\"}),\", \",(0,n.jsx)(e.em,{children:\"P\"}),`'s behavior manifests as Byzantine\nbehavior, specifically violating the assumptions `,(0,n.jsx)(e.em,{children:\"S\"}),`'s designers thought\nparticipants would not exhibit and thus excluded from `,(0,n.jsx)(e.em,{children:\"S\"}),`'s threat model.\nConsidered in the larger context of the external world in which `,(0,n.jsx)(e.em,{children:\"S\"}),` is embedded,\nhowever, including the external trading system `,(0,n.jsx)(e.em,{children:\"S'\"}),\", \",(0,n.jsx)(e.em,{children:\"P\"}),`'s behavior is perfectly\nrational and economically-motivated. Thus, the very rationality of `,(0,n.jsx)(e.em,{children:\"P\"}),` in the\nlarger open world is precisely what motivates `,(0,n.jsx)(e.em,{children:\"P\"}),` to break, and profit from,\n`,(0,n.jsx)(e.em,{children:\"S\"}),\"'s ill-considered assumption that its participants would behave rationally.\"]}),`\n`,(0,n.jsxs)(e.h2,{id:\"implications-for-practical-systems\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#implications-for-practical-systems\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Implications for Practical Systems\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`This type of financial attack is by no means entirely theoretical or limited to\nfully-digital systems such as cryptocurrencies. In our scenario, `,(0,n.jsx)(e.em,{children:\"P\"}),` is\nessentially playing a game closely-analogous to the investors in\n`,(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Credit_default_swap\",children:\"credit default swaps\"}),` who\nboth contributed to, and profited handsomely from, the\n`,(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Financial_crisis_of_2007%E2%80%932008\",children:\"2007-2008 financial crisis\"}),`,\nas covered more recently in the film\n`,(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/The_Big_Short_(film)\",children:\"The Big Short\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`In the cryptocurrency space, some real-world attacks we are seeing \\u2013 such as\nincreasingly-common\n`,(0,n.jsx)(e.a,{href:\"https://cryptoslate.com/prolific-51-attacks-crypto-verge-ethereum-classic-bitcoin-gold-feathercoin-vertcoin/\",children:\"51% attacks\"}),`\n\\u2013 might be viewed as special cases of this metacircular attack on rationality.\nIt is often claimed that large proof-of-work miners (or proof-of-stake holders)\nwill not attempt 51% attacks because doing so would undermine the value of the\ncryptocurrency in which they by definition hold a large stake, and hence would\nbe \\u201Cirrational\\u201D. But this argument falls apart if the attack allows the large\nstakeholder to reap rewards outside the attacked system, e.g., by defrauding\nexchanges or selling `,(0,n.jsx)(e.em,{children:\"S\"}),\" short in other systems.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`Externally-motivated attacks on cryptocurrencies have been predicted before in\nthe form of\n`,(0,n.jsx)(e.a,{href:\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2041492\",children:'virtual protest or \"Occupy Bitcoin\" attacks'}),`,\n`,(0,n.jsx)(e.a,{href:\"https://www.econinfosec.org/archive/weis2013/papers/KrollDaveyFeltenWEIS2013.pdf\",children:\"Goldfinger attacks\"}),`,\n`,(0,n.jsx)(e.a,{href:\"https://www.comp.nus.edu.sg/~prateeks/papers/38Attack.pdf\",children:\"puzzle transaction attacks\"}),`,\n`,(0,n.jsx)(e.a,{href:\"https://www.sba-research.org/wp-content/uploads/publications/201709%20-%20AJudmayer%20-%20CBT_Merged_Mining_camera_ready_final.pdf\",children:\"merged mining attacks\"}),`,\n`,(0,n.jsx)(e.a,{href:\"https://fc18.ifca.ai/bitcoin/papers/bitcoin18-final17.pdf\",children:\"hostile blockchain takeovers\"}),`,\nand out-of-band variants of\n`,(0,n.jsx)(e.a,{href:\"https://eprint.iacr.org/2019/775.pdf\",children:\"pay-to-win attacks\"}),`. All these attacks\nare specific instances of our argument. They have been presented in the\nliterature as open yet solvable challenges. We are not aware, however, of any\nprior attempt to summarize the lessons learned and formulate a general\nimpossibility statement.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`For most practical systems, we do not even know if they are incentive compatible\nin the absence of an external system `,(0,n.jsx)(e.em,{children:\"S'\"}),` \\u2013 i.e., where assumption 2 is violated\n\\u2013 and probably they are not. Almost all game-theoretic treatments of (parts of)\nthe Bitcoin protocol deliver negative results. Many attacks against specific\ncryptocurrency system designs are known to be profitable in expectation, such as\n`,(0,n.jsx)(e.a,{href:\"https://www.avivz.net/pubs/12/Bitcoin_EC0212.pdf\",children:\"ransaction withholding\"}),`,\n`,(0,n.jsx)(e.a,{href:\"https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2407834\",children:\"empty block mining\"}),`,\n`,(0,n.jsx)(e.a,{href:\"https://www.cs.cornell.edu/~ie53/publications/btcProcFC.pdf\",children:\"selfish mining\"}),`,\n`,(0,n.jsx)(e.a,{href:\"http://webee.technion.ac.il/people/ittay/publications/btcPoolsSP15.pdf\",children:\"block withholding\"}),`,\n`,(0,n.jsx)(e.a,{href:\"https://www.cs.umd.edu/~kartik/papers/5_stubborn_eclipse.pdf\",children:\"stubborn mining\"}),`,\n`,(0,n.jsx)(e.a,{href:\"https://syssec.kaist.ac.kr/pub/2017/kwon_ccs_2017.pdf\",children:\"fork after withholding\"}),`,\nand `,(0,n.jsx)(e.a,{href:\"http://www.cs.umd.edu/~jkatz/papers/whale-txs.pdf\",children:\"whale attacks\"}),`. It is\nlikely thanks only to frictions such as risk aversion and other costs that we\nrarely observe such attacks in large deployed systems. Many specific attacks do\nnot even depend on assumption 1, underlining the fact that rationality is not a\nsilver bullet even where this metacircular argument does not apply. Where it\ndoes apply, it is more general and effectively `,(0,n.jsx)(e.em,{children:\"guarantees\"}),` the existence of\nattacks against `,(0,n.jsx)(e.em,{children:\"all\"}),\" open systems that assume participants are rational.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`Another related observation is that financial markets on derivatives of a system\n`,(0,n.jsx)(e.em,{children:\"S\"}),\" mature in the external world (e.g., \",(0,n.jsx)(e.em,{children:\"S'\"}),\") as \",(0,n.jsx)(e.em,{children:\"S\"}),` grows and becomes more\nrelevant. So in some sense, systems built on the rationality assumption are\ntemporarily more secure only until they become fat enough targets to be eaten by\ntheir own success. We can see this effect, for example, in the growing and\nincreasingly liquid market for hash power, which effectively thwarts\n`,(0,n.jsx)(e.a,{href:\"https://bitcoin.org/bitcoin.pdf\",children:\"Nakamoto\\u2019s\"}),`\n(`,(0,n.jsx)(e.a,{href:\"https://link.springer.com/chapter/10.1007/3-540-48071-4_10\",children:\"or Dwork\\u2019s\"}),`) rule\nof thumb that the ratio of processors to individuals varies in a small band.\nSuch dynamics happen in the real world, too. But there they have traditionally\ntaken centuries or decades while in cryptocurrency space everything happens in\ntime-lapse.`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"limitations-of-the-argument\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#limitations-of-the-argument\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Limitations of the Argument\"]}),`\n`,(0,n.jsx)(e.p,{children:`This argument is of course currently only a rough and informal sketch. An\nenterprising student might wish to try formalizing it, or maybe someone has\nalready done so but we are unaware of it.`}),`\n`,(0,n.jsx)(e.p,{children:`The metacircular argument certainly does not apply to all cryptocurrencies or\ndecentralized systems. In a permissioned system, for example, in which a closed\ngroup of participants are strongly-identified and subject to legal and\ncontractual agreements with each other, one can hope that the threat of lawsuits\nfor arbitrarily-large damages will keep rational participants incentivized to\nbehave correctly. Similarly, in a national cryptocurrency, which might be\nrelatively open but only to citizens of a given country, and which require\nverified identities with which the police can expect to track down and jail\nmisbehaving participants, this metacircular argument does not necessarily apply.`}),`\n`,(0,n.jsx)(e.p,{children:`Apart from police enforcement, rationality assumptions may be weakened in other\nways to circumvent the metacircular argument. For example, an open system might\nbe designed according to a \\u201Cweak rationality\\u201D assumption that users need\nincentives to join the system in the first place (e.g., mining rewards in\nBitcoin), but that after having become stakeholders, most will then behave\nhonestly. In this case, rational incentives serve only as a tool for system\ngrowth, but become irrelevant and equivalent to a strong honesty assumption in\nterms of the internal security of the system itself.`}),`\n`,(0,n.jsxs)(e.h2,{id:\"conclusion-irrationality-can-be-rational\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#conclusion-irrationality-can-be-rational\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Conclusion: Irrationality Can Be Rational\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://bford.info/2019/09/23/rational/adversaries-open.svg\",alt:\"Types of adversaries\"})}),`\n`,(0,n.jsxs)(e.p,{children:[`What many in the cryptocurrency community seem to want is a system that is both\npermissionless and tolerant of strongly-rational behavior \\u2013 either beyond the\nthresholds a similar a Byzantine system would tolerate (such as a rational\nmajority), or by deriving some simplicity or efficiency benefit from assuming\nrationality. But in an open world in which the permissionless system is not the\nonly game in town, a potential `,(0,n.jsx)(e.em,{children:\"perfectly rational\"}),` attacker can always exist,\nor appear at any time, whose entirely rational behavior is precisely to profit\nfrom bringing the system down by violating its assumptions on participant\nbehavior.`]}),`\n`,(0,n.jsx)(e.p,{children:`So if you think you have designed a permissionless decentralized system that is\ncleverly secured based on rationality assumptions, you haven't. You have merely\nobfuscated the rational attacker's motive and opportunity to profit outside your\nsystem from breaking your rationality assumptions. The only practical way to\neliminate this threat appears to be either to close the system and require\nstrong identities and police protection, or else secure the system against\narbitrary Byzantine behavior, thereby rendering rationality assumptions\nredundant and useless for security.`}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:`We wish to thank Jeff Allen, Ittay Eyal, Damir Filipovic, Patrik Keller,\nAlexander Lipton, Andrew Miller, and Haoqian Zhang for helpful feedback on\nearly drafts of this post.`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.em,{children:[`Updated 27-Oct-2019 with link to\n`,(0,n.jsx)(e.a,{href:\"https://arxiv.org/pdf/1910.08820.pdf\",children:\"PDF preprint\"}),\" version.\"]})}),`\n`]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var S=k;function x(t,e,i){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(i?\"\\nIt\\u2019s referenced in your code at `\"+i+\"` in `/Users/janitor/resite/content/blog/_mdx_bundler_entry_point-cb2f6093-4066-4324-bb06-25ba23129737.mdx`\":\"\"))}return w(B);})();\n;return Component;"
    },
    "_id": "blog/rationality-is-self-defeating.mdx",
    "_raw": {
      "sourceFilePath": "blog/rationality-is-self-defeating.mdx",
      "sourceFileName": "rationality-is-self-defeating.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/rationality-is-self-defeating"
    },
    "type": "Post",
    "slug": "/blog/rationality-is-self-defeating",
    "slugAsParams": "rationality-is-self-defeating"
  },
  {
    "title": "Server and Client Components",
    "description": "React Server Components allow developers to build applications that span the server and client.",
    "date": "2023-01-08T00:00:00.000Z",
    "published": true,
    "image": "/images/blog/blog-post-4.jpg",
    "authors": [
      "shadcn"
    ],
    "body": {
      "raw": "\n<Callout>\n  The text below is from the [Tailwind\n  CSS](https://play.tailwindcss.com/uj1vGACRJA?layout=preview) docs. I copied it\n  here to test the markdown styles. **Tailwind is awesome. You should use it.**\n</Callout>\n\nUntil now, trying to style an article, document, or blog post with Tailwind has been a tedious task that required a keen eye for typography and a lot of complex custom CSS.\n\nBy default, Tailwind removes all of the default browser styling from paragraphs, headings, lists and more. This ends up being really useful for building application UIs because you spend less time undoing user-agent styles, but when you _really are_ just trying to style some content that came from a rich-text editor in a CMS or a markdown file, it can be surprising and unintuitive.\n\nWe get lots of complaints about it actually, with people regularly asking us things like:\n\n> Why is Tailwind removing the default styles on my `h1` elements? How do I disable this? What do you mean I lose all the other base styles too?\n> We hear you, but we're not convinced that simply disabling our base styles is what you really want. You don't want to have to remove annoying margins every time you use a `p` element in a piece of your dashboard UI. And I doubt you really want your blog posts to use the user-agent styles either — you want them to look _awesome_, not awful.\n\nThe `@tailwindcss/typography` plugin is our attempt to give you what you _actually_ want, without any of the downsides of doing something stupid like disabling our base styles.\n\nIt adds a new `prose` class that you can slap on any block of vanilla HTML content and turn it into a beautiful, well-formatted document:\n\n```html\n<article class=\"prose\">\n  <h1>Garlic bread with cheese: What the science tells us</h1>\n  <p>\n    For years parents have espoused the health benefits of eating garlic bread\n    with cheese to their children, with the food earning such an iconic status\n    in our culture that kids will often dress up as warm, cheesy loaf for\n    Halloween.\n  </p>\n  <p>\n    But a recent study shows that the celebrated appetizer may be linked to a\n    series of rabies cases springing up around the country.\n  </p>\n</article>\n```\n\nFor more information about how to use the plugin and the features it includes, [read the documentation](https://github.com/tailwindcss/typography/blob/master/README.md).\n\n---\n\n## What to expect from here on out\n\nWhat follows from here is just a bunch of absolute nonsense I've written to dogfood the plugin itself. It includes every sensible typographic element I could think of, like **bold text**, unordered lists, ordered lists, code blocks, block quotes, _and even italics_.\n\nIt's important to cover all of these use cases for a few reasons:\n\n1.  We want everything to look good out of the box.\n2.  Really just the first reason, that's the whole point of the plugin.\n3.  Here's a third pretend reason though a list with three items looks more realistic than a list with two items.\n\nNow we're going to try out another header style.\n\n### Typography should be easy\n\nSo that's a header for you — with any luck if we've done our job correctly that will look pretty reasonable.\n\nSomething a wise person once told me about typography is:\n\n> Typography is pretty important if you don't want your stuff to look like trash. Make it good then it won't be bad.\n\nIt's probably important that images look okay here by default as well:\n\n<Image\n  src=\"/images/blog/blog-post-4.jpg\"\n  width=\"718\"\n  height=\"404\"\n  alt=\"Image\"\n/>\n\nContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.\n\nNow I'm going to show you an example of an unordered list to make sure that looks good, too:\n\n- So here is the first item in this list.\n- In this example we're keeping the items short.\n- Later, we'll use longer, more complex list items.\n\nAnd that's the end of this section.\n\n## What if we stack headings?\n\n### We should make sure that looks good, too.\n\nSometimes you have headings directly underneath each other. In those cases you often have to undo the top margin on the second heading because it usually looks better for the headings to be closer together than a paragraph followed by a heading should be.\n\n### When a heading comes after a paragraph …\n\nWhen a heading comes after a paragraph, we need a bit more space, like I already mentioned above. Now let's see what a more complex list would look like.\n\n- **I often do this thing where list items have headings.**\n\n  For some reason I think this looks cool which is unfortunate because it's pretty annoying to get the styles right.\n\n  I often have two or three paragraphs in these list items, too, so the hard part is getting the spacing between the paragraphs, list item heading, and separate list items to all make sense. Pretty tough honestly, you could make a strong argument that you just shouldn't write this way.\n\n- **Since this is a list, I need at least two items.**\n\n  I explained what I'm doing already in the previous list item, but a list wouldn't be a list if it only had one item, and we really want this to look realistic. That's why I've added this second list item so I actually have something to look at when writing the styles.\n\n- **It's not a bad idea to add a third item either.**\n\n  I think it probably would've been fine to just use two items but three is definitely not worse, and since I seem to be having no trouble making up arbitrary things to type, I might as well include it.\n\nAfter this sort of list I usually have a closing statement or paragraph, because it kinda looks weird jumping right to a heading.\n\n## Code should look okay by default.\n\nI think most people are going to use [highlight.js](https://highlightjs.org/) or [Prism](https://prismjs.com/) or something if they want to style their code blocks but it wouldn't hurt to make them look _okay_ out of the box, even with no syntax highlighting.\n\nHere's what a default `tailwind.config.js` file looks like at the time of writing:\n\n```js\nmodule.exports = {\n  purge: [],\n  theme: {\n    extend: {},\n  },\n  variants: {},\n  plugins: [],\n}\n```\n\nHopefully that looks good enough to you.\n\n### What about nested lists?\n\nNested lists basically always look bad which is why editors like Medium don't even let you do it, but I guess since some of you goofballs are going to do it we have to carry the burden of at least making it work.\n\n1.  **Nested lists are rarely a good idea.**\n    - You might feel like you are being really \"organized\" or something but you are just creating a gross shape on the screen that is hard to read.\n    - Nested navigation in UIs is a bad idea too, keep things as flat as possible.\n    - Nesting tons of folders in your source code is also not helpful.\n2.  **Since we need to have more items, here's another one.**\n    - I'm not sure if we'll bother styling more than two levels deep.\n    - Two is already too much, three is guaranteed to be a bad idea.\n    - If you nest four levels deep you belong in prison.\n3.  **Two items isn't really a list, three is good though.**\n    - Again please don't nest lists if you want people to actually read your content.\n    - Nobody wants to look at this.\n    - I'm upset that we even have to bother styling this.\n\nThe most annoying thing about lists in Markdown is that `<li>` elements aren't given a child `<p>` tag unless there are multiple paragraphs in the list item. That means I have to worry about styling that annoying situation too.\n\n- **For example, here's another nested list.**\n\n  But this time with a second paragraph.\n\n  - These list items won't have `<p>` tags\n  - Because they are only one line each\n\n- **But in this second top-level list item, they will.**\n\n  This is especially annoying because of the spacing on this paragraph.\n\n  - As you can see here, because I've added a second line, this list item now has a `<p>` tag.\n\n    This is the second line I'm talking about by the way.\n\n  - Finally here's another list item so it's more like a list.\n\n- A closing list item, but with no nested list, because why not?\n\nAnd finally a sentence to close off this section.\n\n## There are other elements we need to style\n\nI almost forgot to mention links, like [this link to the Tailwind CSS website](https://tailwindcss.com). We almost made them blue but that's so yesterday, so we went with dark gray, feels edgier.\n\nWe even included table styles, check it out:\n\n| Wrestler                | Origin       | Finisher           |\n| ----------------------- | ------------ | ------------------ |\n| Bret \"The Hitman\" Hart  | Calgary, AB  | Sharpshooter       |\n| Stone Cold Steve Austin | Austin, TX   | Stone Cold Stunner |\n| Randy Savage            | Sarasota, FL | Elbow Drop         |\n| Vader                   | Boulder, CO  | Vader Bomb         |\n| Razor Ramon             | Chuluota, FL | Razor's Edge       |\n\nWe also need to make sure inline code looks good, like if I wanted to talk about `<span>` elements or tell you the good news about `@tailwindcss/typography`.\n\n### Sometimes I even use `code` in headings\n\nEven though it's probably a bad idea, and historically I've had a hard time making it look good. This _\"wrap the code blocks in backticks\"_ trick works pretty well though really.\n\nAnother thing I've done in the past is put a `code` tag inside of a link, like if I wanted to tell you about the [`tailwindcss/docs`](https://github.com/tailwindcss/docs) repository. I don't love that there is an underline below the backticks but it is absolutely not worth the madness it would require to avoid it.\n\n#### We haven't used an `h4` yet\n\nBut now we have. Please don't use `h5` or `h6` in your content, Medium only supports two heading levels for a reason, you animals. I honestly considered using a `before` pseudo-element to scream at you if you use an `h5` or `h6`.\n\nWe don't style them at all out of the box because `h4` elements are already so small that they are the same size as the body copy. What are we supposed to do with an `h5`, make it _smaller_ than the body copy? No thanks.\n\n### We still need to think about stacked headings though.\n\n#### Let's make sure we don't screw that up with `h4` elements, either.\n\nPhew, with any luck we have styled the headings above this text and they look pretty good.\n\nLet's add a closing paragraph here so things end with a decently sized block of text. I can't explain why I want things to end that way but I have to assume it's because I think things will look weird or unbalanced if there is a heading too close to the end of the document.\n\nWhat I've written here is probably long enough, but adding this final sentence can't hurt.\n\n## GitHub Flavored Markdown\n\nI've also added support for GitHub Flavored Mardown using `remark-gfm`.\n\nWith `remark-gfm`, we get a few extra features in our markdown. Example: autolink literals.\n\nA link like www.example.com or https://example.com would automatically be converted into an `a` tag.\n\nThis works for email links too: contact@example.com.\n",
      "code": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!g.call(t,a)&&a!==i&&o(t,a,{get:()=>e[a],enumerable:!(l=u(e,a))||l.enumerable});return t};var f=(t,e,i)=>(i=t!=null?p(y(t)):{},s(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),k=t=>s(o({},\"__esModule\",{value:!0}),t);var h=w((x,r)=>{r.exports=_jsx_runtime});var C={};b(C,{default:()=>I,frontmatter:()=>v});var n=f(h()),v={title:\"Server and Client Components\",description:\"React Server Components allow developers to build applications that span the server and client.\",image:\"/images/blog/blog-post-4.jpg\",date:\"2023-01-08\",authors:[\"shadcn\"]};function d(t){let e=Object.assign({p:\"p\",a:\"a\",strong:\"strong\",em:\"em\",blockquote:\"blockquote\",code:\"code\",div:\"div\",pre:\"pre\",span:\"span\",hr:\"hr\",h2:\"h2\",ol:\"ol\",li:\"li\",h3:\"h3\",ul:\"ul\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",h4:\"h4\"},t.components),{Callout:i,Image:l}=e;return i||c(\"Callout\",!0,\"10:1-14:11\"),l||c(\"Image\",!0,\"71:1-76:3\"),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i,{children:(0,n.jsxs)(e.p,{children:[\"The text below is from the \",(0,n.jsx)(e.a,{href:\"https://play.tailwindcss.com/uj1vGACRJA?layout=preview\",children:`Tailwind\nCSS`}),` docs. I copied it\nhere to test the markdown styles. `,(0,n.jsx)(e.strong,{children:\"Tailwind is awesome. You should use it.\"})]})}),`\n`,(0,n.jsx)(e.p,{children:\"Until now, trying to style an article, document, or blog post with Tailwind has been a tedious task that required a keen eye for typography and a lot of complex custom CSS.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"By default, Tailwind removes all of the default browser styling from paragraphs, headings, lists and more. This ends up being really useful for building application UIs because you spend less time undoing user-agent styles, but when you \",(0,n.jsx)(e.em,{children:\"really are\"}),\" just trying to style some content that came from a rich-text editor in a CMS or a markdown file, it can be surprising and unintuitive.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We get lots of complaints about it actually, with people regularly asking us things like:\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Why is Tailwind removing the default styles on my \",(0,n.jsx)(e.code,{children:\"h1\"}),` elements? How do I disable this? What do you mean I lose all the other base styles too?\nWe hear you, but we're not convinced that simply disabling our base styles is what you really want. You don't want to have to remove annoying margins every time you use a `,(0,n.jsx)(e.code,{children:\"p\"}),\" element in a piece of your dashboard UI. And I doubt you really want your blog posts to use the user-agent styles either \\u2014 you want them to look \",(0,n.jsx)(e.em,{children:\"awesome\"}),\", not awful.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"@tailwindcss/typography\"}),\" plugin is our attempt to give you what you \",(0,n.jsx)(e.em,{children:\"actually\"}),\" want, without any of the downsides of doing something stupid like disabling our base styles.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"It adds a new \",(0,n.jsx)(e.code,{children:\"prose\"}),\" class that you can slap on any block of vanilla HTML content and turn it into a beautiful, well-formatted document:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"html\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"html\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"<\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"article\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#79C0FF\"},children:\"class\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#A5D6FF\"},children:'\"prose\"'}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  <\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"h1\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">Garlic bread with cheese: What the science tells us</\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"h1\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  <\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    For years parents have espoused the health benefits of eating garlic bread\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    with cheese to their children, with the food earning such an iconic status\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    in our culture that kids will often dress up as warm, cheesy loaf for\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    Halloween.\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  </\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  <\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    But a recent study shows that the celebrated appetizer may be linked to a\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    series of rabies cases springing up around the country.\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  </\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"p\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"</\"}),(0,n.jsx)(e.span,{style:{color:\"#7EE787\"},children:\"article\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\">\"})]})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"For more information about how to use the plugin and the features it includes, \",(0,n.jsx)(e.a,{href:\"https://github.com/tailwindcss/typography/blob/master/README.md\",children:\"read the documentation\"}),\".\"]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.h2,{id:\"what-to-expect-from-here-on-out\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#what-to-expect-from-here-on-out\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What to expect from here on out\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"What follows from here is just a bunch of absolute nonsense I've written to dogfood the plugin itself. It includes every sensible typographic element I could think of, like \",(0,n.jsx)(e.strong,{children:\"bold text\"}),\", unordered lists, ordered lists, code blocks, block quotes, \",(0,n.jsx)(e.em,{children:\"and even italics\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"It's important to cover all of these use cases for a few reasons:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"We want everything to look good out of the box.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Really just the first reason, that's the whole point of the plugin.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Here's a third pretend reason though a list with three items looks more realistic than a list with two items.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Now we're going to try out another header style.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"typography-should-be-easy\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#typography-should-be-easy\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Typography should be easy\"]}),`\n`,(0,n.jsx)(e.p,{children:\"So that's a header for you \\u2014 with any luck if we've done our job correctly that will look pretty reasonable.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Something a wise person once told me about typography is:\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Typography is pretty important if you don't want your stuff to look like trash. Make it good then it won't be bad.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It's probably important that images look okay here by default as well:\"}),`\n`,(0,n.jsx)(l,{src:\"/images/blog/blog-post-4.jpg\",width:\"718\",height:\"404\",alt:\"Image\"}),`\n`,(0,n.jsx)(e.p,{children:\"Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Now I'm going to show you an example of an unordered list to make sure that looks good, too:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"So here is the first item in this list.\"}),`\n`,(0,n.jsx)(e.li,{children:\"In this example we're keeping the items short.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Later, we'll use longer, more complex list items.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"And that's the end of this section.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"what-if-we-stack-headings\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#what-if-we-stack-headings\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What if we stack headings?\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"we-should-make-sure-that-looks-good-too\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#we-should-make-sure-that-looks-good-too\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"We should make sure that looks good, too.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Sometimes you have headings directly underneath each other. In those cases you often have to undo the top margin on the second heading because it usually looks better for the headings to be closer together than a paragraph followed by a heading should be.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"when-a-heading-comes-after-a-paragraph-\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#when-a-heading-comes-after-a-paragraph-\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"When a heading comes after a paragraph \\u2026\"]}),`\n`,(0,n.jsx)(e.p,{children:\"When a heading comes after a paragraph, we need a bit more space, like I already mentioned above. Now let's see what a more complex list would look like.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"I often do this thing where list items have headings.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"For some reason I think this looks cool which is unfortunate because it's pretty annoying to get the styles right.\"}),`\n`,(0,n.jsx)(e.p,{children:\"I often have two or three paragraphs in these list items, too, so the hard part is getting the spacing between the paragraphs, list item heading, and separate list items to all make sense. Pretty tough honestly, you could make a strong argument that you just shouldn't write this way.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"Since this is a list, I need at least two items.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"I explained what I'm doing already in the previous list item, but a list wouldn't be a list if it only had one item, and we really want this to look realistic. That's why I've added this second list item so I actually have something to look at when writing the styles.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"It's not a bad idea to add a third item either.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"I think it probably would've been fine to just use two items but three is definitely not worse, and since I seem to be having no trouble making up arbitrary things to type, I might as well include it.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"After this sort of list I usually have a closing statement or paragraph, because it kinda looks weird jumping right to a heading.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"code-should-look-okay-by-default\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#code-should-look-okay-by-default\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Code should look okay by default.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I think most people are going to use \",(0,n.jsx)(e.a,{href:\"https://highlightjs.org/\",children:\"highlight.js\"}),\" or \",(0,n.jsx)(e.a,{href:\"https://prismjs.com/\",children:\"Prism\"}),\" or something if they want to style their code blocks but it wouldn't hurt to make them look \",(0,n.jsx)(e.em,{children:\"okay\"}),\" out of the box, even with no syntax highlighting.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here's what a default \",(0,n.jsx)(e.code,{children:\"tailwind.config.js\"}),\" file looks like at the time of writing:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"js\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"js\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#79C0FF\"},children:\"module\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\".\"}),(0,n.jsx)(e.span,{style:{color:\"#79C0FF\"},children:\"exports\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#FF7B72\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\" {\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  purge: [],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  theme: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    extend: {},\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  variants: {},\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  plugins: [],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Hopefully that looks good enough to you.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-about-nested-lists\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#what-about-nested-lists\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What about nested lists?\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Nested lists basically always look bad which is why editors like Medium don't even let you do it, but I guess since some of you goofballs are going to do it we have to carry the burden of at least making it work.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Nested lists are rarely a good idea.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:'You might feel like you are being really \"organized\" or something but you are just creating a gross shape on the screen that is hard to read.'}),`\n`,(0,n.jsx)(e.li,{children:\"Nested navigation in UIs is a bad idea too, keep things as flat as possible.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Nesting tons of folders in your source code is also not helpful.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Since we need to have more items, here's another one.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"I'm not sure if we'll bother styling more than two levels deep.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Two is already too much, three is guaranteed to be a bad idea.\"}),`\n`,(0,n.jsx)(e.li,{children:\"If you nest four levels deep you belong in prison.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Two items isn't really a list, three is good though.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Again please don't nest lists if you want people to actually read your content.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Nobody wants to look at this.\"}),`\n`,(0,n.jsx)(e.li,{children:\"I'm upset that we even have to bother styling this.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The most annoying thing about lists in Markdown is that \",(0,n.jsx)(e.code,{children:\"<li>\"}),\" elements aren't given a child \",(0,n.jsx)(e.code,{children:\"<p>\"}),\" tag unless there are multiple paragraphs in the list item. That means I have to worry about styling that annoying situation too.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"For example, here's another nested list.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"But this time with a second paragraph.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"These list items won't have \",(0,n.jsx)(e.code,{children:\"<p>\"}),\" tags\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Because they are only one line each\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"But in this second top-level list item, they will.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This is especially annoying because of the spacing on this paragraph.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"As you can see here, because I've added a second line, this list item now has a \",(0,n.jsx)(e.code,{children:\"<p>\"}),\" tag.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This is the second line I'm talking about by the way.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Finally here's another list item so it's more like a list.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"A closing list item, but with no nested list, because why not?\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"And finally a sentence to close off this section.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"there-are-other-elements-we-need-to-style\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#there-are-other-elements-we-need-to-style\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"There are other elements we need to style\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I almost forgot to mention links, like \",(0,n.jsx)(e.a,{href:\"https://tailwindcss.com\",children:\"this link to the Tailwind CSS website\"}),\". We almost made them blue but that's so yesterday, so we went with dark gray, feels edgier.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We even included table styles, check it out:\"}),`\n`,(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Wrestler\"}),(0,n.jsx)(e.th,{children:\"Origin\"}),(0,n.jsx)(e.th,{children:\"Finisher\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:'Bret \"The Hitman\" Hart'}),(0,n.jsx)(e.td,{children:\"Calgary, AB\"}),(0,n.jsx)(e.td,{children:\"Sharpshooter\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Stone Cold Steve Austin\"}),(0,n.jsx)(e.td,{children:\"Austin, TX\"}),(0,n.jsx)(e.td,{children:\"Stone Cold Stunner\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Randy Savage\"}),(0,n.jsx)(e.td,{children:\"Sarasota, FL\"}),(0,n.jsx)(e.td,{children:\"Elbow Drop\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Vader\"}),(0,n.jsx)(e.td,{children:\"Boulder, CO\"}),(0,n.jsx)(e.td,{children:\"Vader Bomb\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"Razor Ramon\"}),(0,n.jsx)(e.td,{children:\"Chuluota, FL\"}),(0,n.jsx)(e.td,{children:\"Razor's Edge\"})]})]})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We also need to make sure inline code looks good, like if I wanted to talk about \",(0,n.jsx)(e.code,{children:\"<span>\"}),\" elements or tell you the good news about \",(0,n.jsx)(e.code,{children:\"@tailwindcss/typography\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"sometimes-i-even-use-code-in-headings\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#sometimes-i-even-use-code-in-headings\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Sometimes I even use \",(0,n.jsx)(e.code,{children:\"code\"}),\" in headings\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Even though it's probably a bad idea, and historically I've had a hard time making it look good. This \",(0,n.jsx)(e.em,{children:'\"wrap the code blocks in backticks\"'}),\" trick works pretty well though really.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Another thing I've done in the past is put a \",(0,n.jsx)(e.code,{children:\"code\"}),\" tag inside of a link, like if I wanted to tell you about the \",(0,n.jsx)(e.a,{href:\"https://github.com/tailwindcss/docs\",children:(0,n.jsx)(e.code,{children:\"tailwindcss/docs\"})}),\" repository. I don't love that there is an underline below the backticks but it is absolutely not worth the madness it would require to avoid it.\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"we-havent-used-an-h4-yet\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#we-havent-used-an-h4-yet\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"We haven't used an \",(0,n.jsx)(e.code,{children:\"h4\"}),\" yet\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"But now we have. Please don't use \",(0,n.jsx)(e.code,{children:\"h5\"}),\" or \",(0,n.jsx)(e.code,{children:\"h6\"}),\" in your content, Medium only supports two heading levels for a reason, you animals. I honestly considered using a \",(0,n.jsx)(e.code,{children:\"before\"}),\" pseudo-element to scream at you if you use an \",(0,n.jsx)(e.code,{children:\"h5\"}),\" or \",(0,n.jsx)(e.code,{children:\"h6\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We don't style them at all out of the box because \",(0,n.jsx)(e.code,{children:\"h4\"}),\" elements are already so small that they are the same size as the body copy. What are we supposed to do with an \",(0,n.jsx)(e.code,{children:\"h5\"}),\", make it \",(0,n.jsx)(e.em,{children:\"smaller\"}),\" than the body copy? No thanks.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"we-still-need-to-think-about-stacked-headings-though\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#we-still-need-to-think-about-stacked-headings-though\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"We still need to think about stacked headings though.\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"lets-make-sure-we-dont-screw-that-up-with-h4-elements-either\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#lets-make-sure-we-dont-screw-that-up-with-h4-elements-either\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Let's make sure we don't screw that up with \",(0,n.jsx)(e.code,{children:\"h4\"}),\" elements, either.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Phew, with any luck we have styled the headings above this text and they look pretty good.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let's add a closing paragraph here so things end with a decently sized block of text. I can't explain why I want things to end that way but I have to assume it's because I think things will look weird or unbalanced if there is a heading too close to the end of the document.\"}),`\n`,(0,n.jsx)(e.p,{children:\"What I've written here is probably long enough, but adding this final sentence can't hurt.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"github-flavored-markdown\",children:[(0,n.jsx)(e.a,{className:\"subheading-anchor\",\"aria-label\":\"Link to section\",href:\"#github-flavored-markdown\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"GitHub Flavored Markdown\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I've also added support for GitHub Flavored Mardown using \",(0,n.jsx)(e.code,{children:\"remark-gfm\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"With \",(0,n.jsx)(e.code,{children:\"remark-gfm\"}),\", we get a few extra features in our markdown. Example: autolink literals.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A link like \",(0,n.jsx)(e.a,{href:\"http://www.example.com\",children:\"www.example.com\"}),\" or \",(0,n.jsx)(e.a,{href:\"https://example.com\",children:\"https://example.com\"}),\" would automatically be converted into an \",(0,n.jsx)(e.code,{children:\"a\"}),\" tag.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This works for email links too: \",(0,n.jsx)(e.a,{href:\"mailto:contact@example.com\",children:\"contact@example.com\"}),\".\"]})]})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var I=D;function c(t,e,i){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(i?\"\\nIt\\u2019s referenced in your code at `\"+i+\"` in `/Users/janitor/resite/content/blog/_mdx_bundler_entry_point-58b3e605-9006-4766-bd0f-ede1f8fe5b6c.mdx`\":\"\"))}return k(C);})();\n;return Component;"
    },
    "_id": "blog/server-client-components.mdx",
    "_raw": {
      "sourceFilePath": "blog/server-client-components.mdx",
      "sourceFileName": "server-client-components.mdx",
      "sourceFileDir": "blog",
      "contentType": "mdx",
      "flattenedPath": "blog/server-client-components"
    },
    "type": "Post",
    "slug": "/blog/server-client-components",
    "slugAsParams": "server-client-components"
  }
]