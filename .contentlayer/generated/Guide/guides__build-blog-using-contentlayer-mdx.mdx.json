{
  "title": "Build a blog using ContentLayer and MDX.",
  "description": "Learn how to use ContentLayer to build a blog with Next.js",
  "date": "2022-11-18T00:00:00.000Z",
  "published": true,
  "body": {
    "raw": "\n<Callout>\n\nThis page is under construction\n\n</Callout>\n\n<Callout>\n  The text below is from the [Tailwind\n  CSS](https://play.tailwindcss.com/uj1vGACRJA?layout=preview) docs. I copied it\n  here to test the markdown styles. **Tailwind is awesome. You should use it.**\n</Callout>\n\nUntil now, trying to style an article, document, or blog post with Tailwind has been a tedious task that required a keen eye for typography and a lot of complex custom CSS.\n\nBy default, Tailwind removes all of the default browser styling from paragraphs, headings, lists and more. This ends up being really useful for building application UIs because you spend less time undoing user-agent styles, but when you _really are_ just trying to style some content that came from a rich-text editor in a CMS or a markdown file, it can be surprising and unintuitive.\n\nWe get lots of complaints about it actually, with people regularly asking us things like:\n\n```js\nmodule.exports = {\n  purge: [],\n  theme: {\n    extend: {},\n  },\n  variants: {},\n  plugins: [],\n}\n```",
    "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var s in e)a(t,s,{get:e[s],enumerable:!0})},i=(t,e,s,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of u(e))!y.call(t,l)&&l!==s&&a(t,l,{get:()=>e[l],enumerable:!(r=h(e,l))||r.enumerable});return t};var D=(t,e,s)=>(s=t!=null?p(m(t)):{},i(e||!t||!t.__esModule?a(s,\"default\",{value:t,enumerable:!0}):s,t)),C=t=>i(a({},\"__esModule\",{value:!0}),t);var c=g((N,o)=>{o.exports=_jsx_runtime});var _={};f(_,{default:()=>x,frontmatter:()=>w});var n=D(c()),w={title:\"Build a blog using ContentLayer and MDX.\",description:\"Learn how to use ContentLayer to build a blog with Next.js\",date:new Date(16687296e5)};function d(t){let e=Object.assign({p:\"p\",a:\"a\",strong:\"strong\",em:\"em\",div:\"div\",pre:\"pre\",code:\"code\",span:\"span\"},t.components),{Callout:s}=e;return s||j(\"Callout\",!0,\"7:1-11:11\"),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s,{children:(0,n.jsx)(e.p,{children:\"This page is under construction\"})}),`\n`,(0,n.jsx)(s,{children:(0,n.jsxs)(e.p,{children:[\"The text below is from the \",(0,n.jsx)(e.a,{href:\"https://play.tailwindcss.com/uj1vGACRJA?layout=preview\",children:`Tailwind\nCSS`}),` docs. I copied it\nhere to test the markdown styles. `,(0,n.jsx)(e.strong,{children:\"Tailwind is awesome. You should use it.\"})]})}),`\n`,(0,n.jsx)(e.p,{children:\"Until now, trying to style an article, document, or blog post with Tailwind has been a tedious task that required a keen eye for typography and a lot of complex custom CSS.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"By default, Tailwind removes all of the default browser styling from paragraphs, headings, lists and more. This ends up being really useful for building application UIs because you spend less time undoing user-agent styles, but when you \",(0,n.jsx)(e.em,{children:\"really are\"}),\" just trying to style some content that came from a rich-text editor in a CMS or a markdown file, it can be surprising and unintuitive.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We get lots of complaints about it actually, with people regularly asking us things like:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"js\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"js\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#79C0FF\"},children:\"module\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\".\"}),(0,n.jsx)(e.span,{style:{color:\"#79C0FF\"},children:\"exports\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#FF7B72\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\" {\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  purge: [],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  theme: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"    extend: {},\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  variants: {},\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"  plugins: [],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#C9D1D9\"},children:\"}\"})})]})})})]})}function b(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var x=b;function j(t,e,s){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(s?\"\\nIt\\u2019s referenced in your code at `\"+s+\"` in `/Users/janitor/resite/content/guides/_mdx_bundler_entry_point-621cf305-1c05-454c-804e-4537cb4f41fb.mdx`\":\"\"))}return C(_);})();\n;return Component;"
  },
  "_id": "guides/build-blog-using-contentlayer-mdx.mdx",
  "_raw": {
    "sourceFilePath": "guides/build-blog-using-contentlayer-mdx.mdx",
    "sourceFileName": "build-blog-using-contentlayer-mdx.mdx",
    "sourceFileDir": "guides",
    "contentType": "mdx",
    "flattenedPath": "guides/build-blog-using-contentlayer-mdx"
  },
  "type": "Guide",
  "slug": "/guides/build-blog-using-contentlayer-mdx",
  "slugAsParams": "build-blog-using-contentlayer-mdx"
}